#!/usr/bin/env bash
#############################################################################
# Script Name  : catless
# Description  : view text file with less or cat based on terminal window size.
# Dependencies : functionlib
# Arguments    : $1 -> text file to be viewed
# Author       : Copyright (C) 2020, Richard B. Romig, 02 Jan 2020
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.com
# Comments     : 
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
#############################################################################
# Copyright Â© 2020, Richard B. Romig
# Email: rick.romig@gmail.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="0.4.1"
readonly _updated="29 Nov 2023"

## Functions ##

help() {
  local errcode="${1:-2}"
  cat << END_HELP
  Usage: $_script [filename] [-h] [--help]

  $_script displays a text file using either cat or less depending the number of
  lines in the file and the number of rows in the current terminal window. Less 
  is used when the number of lines is greater than the 87% of the rows, otherwise
  cat is used.

"$_script v$_version (updated $_updated)"
END_HELP
  exit "$errcode"
}

is_text() {
  file -bL --mime "$1" | grep -q '^text' && return "$TRUE" || return "$FALSE"
}

main() {
  local textfile="$1"
  # Get 87% of screen and size of file
  catmax=$(( $(tput lines)*87/100 ))
  filesize=$(wc -l "$textfile" | cut -d' ' -f1)

  # View the file
  box "File: $textfile" "*"
  if (( filesize < catmax )); then
	  cat "$textfile"
	  over_line "$_script $_version (Updated $_updated)" "*"
  else
	  less "$textfile"
	  echo "$_script $_version (Updated $_updated)"
  fi
}

## Execution ##

# Check arguments
if [[ $# -eq 0 ]]; then
  printf "%s No argument passed.\n" "$red_error" >&2
  help 1
elif [[ "$1" = "-h" || "$1" = "--help" ]]; then
  help 0
elif [[ ! -f "$1" ]]; then
  printf "%s %s not found.\n" "$red_error" "$1" >&2
  help 2
elif is_text "$1"; then
  filename="$1"
  main "$filename"
else
  printf "%s %s is not a text file.\n" "$red_error" "$1" >&2
  help 1
fi
exit
