#!/usr/bin/env bash
#############################################################################
# Script Name  : catless
# Description  : view text file with less or cat based on terminal window size.
# Dependencies : none
# Arguments    : $1 -> file to be viewed
# Author       : Copyright ©  2020, Richard B. Romig, LudditeGeek@Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.com
# Crated       : 02 Jan 2020
# Updated      : 06 Apr 2025
# Comments     : Checks to see if passed argument is a valid text or json file.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
#############################################################################
#
# Copyright © 2024, Richard B. Romig
# Email: rick.romig@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.
## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

set -eu

## Global Variables ##

script=$(basename "$0"); readonly script
readonly version="5.0.25096"

## Functions ##

help() {
  local errcode updated
  errcode="${1:-2}"
  updated="06 Apr 2025"
  cat << _HELP_
${orange}$script${normal} v$version (updated $updated)
Displays a text file using either cat or less depending the number of lines in
the file and the number of rows in the current terminal window. Less is used when
the number of lines is greater than the 87% of the rows, otherwise cat is used.
Line numbers can be displayed in the output by adding an 'n' or 'N' flag after the file name.

${green}Usage:${normal} $script [filename] [OPTION]

${orange}Available options:${normal}
  -h | --help  Show this help message and exit. (first argument)
  -N | -n      Enable line numbers in the output (second argument)
               The dash is optional. N|n works as well.

_HELP_
  exit "$errcode"
}

over_max() {
	local catmax filelines textfile
	textfile="$1"
	catmax=$(( $(tput lines)*87/100 ))
	filelines=$(wc -l < "$textfile")
	(( filelines > catmax )) && return "$TRUE" || return "$FALSE"
}

view_file() {
  local textfile="$1"
  local ln="$2"
	if over_max "$textfile"; then
    case "$ln" in
      [nN]* )
        less -N "$textfile" ;;
      * )
        less "$textfile"
    esac
    head -n5 "$textfile"
  else
    case "$ln" in
      [nN]* )
        cat -n "$textfile" ;;
      * )
        cat "$textfile"
    esac
  fi
  printf "%sFile: %s%s\n" "$reverse" "$textfile" "$normal"
}

main() {
	local line_numbers="${2:-y}"
  if [[ $# -eq 0 ]]; then
    printf "%s No argument passed.\n" "$RED_ERROR" >&2
    help 1
  elif [[ "$1" = "-h" || "$1" = "--help" ]]; then
    help 0
  elif [[ ! -f "$1" ]]; then
    printf "%s %s not found.\n" "$RED_ERROR" "$1" >&2
    help 2
  elif [[ ! -s "$1" ]]; then
    printf "%s %s is an empty file.\n" "$RED_ERROR" "$1" >&2
  elif file -bL "$1" | grep -qEi "text|json"; then
		line_numbers="${line_numbers//[![:alnum:]]}"
    view_file "$1" "$line_numbers"
  else
    printf "%s %s is not a text file.\n" "$RED_ERROR" "$1" >&2
  fi
   over_line "$script $version" "-"
   exit 0
}

## Execution ##

main "$@"
