#!/usr/bin/env bash
##########################################################################
# Script Name  : check-versions
# Description  : Checks GitHub for latest versions of select programs and
#              : displays latest versions with currently installed versions.
# Dependencies : curl
# Arguments    : none
# Author       : Copyright (C) 2021, Richard B. Romig
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 24 Aug 2021
# Last updated : 06 Mar 2025
# Comments     : Ignores Beta and Release Candidate versions in GitHub releases.
#              : Chromium browser does not create config directory until opened.
#              : Starting with Micro 2.0.14, no deb package released. Uses tar.gz
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################
#
# Copyright Â© 2021, Richard B. Romig
# Email: rick.romig@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

set -eu

## Functions ##

# shellcheck disable=SC2317 # Don't warn about unreachable commands in this function
# ShellCheck may incorrectly believe that code is unreachable if it's invoked by variable name or in a trap.
cleanup() {
	[[ -f "$tmp_file" ]] && rm -f "$tmp_file"
}

installed_version() {
  local ver pkg
  pkg="$1"
  case "$pkg" in
    micro )
      ver=$(micro -version 2>/dev/null | awk '/Version:/ {print $NF}') ;;
    gitea )
      ver=$(gitea --version 2>/dev/null | cut -d' ' -f3) ;;
    * )
      ver=$(dpkg -l "$pkg" 2>/dev/null | awk '/ii/ {print $3}' | sed 's/[~+ud].*//')
  esac
  echo "$ver"
}

github_versions() {
  local cur_ver github_url new_ver package packages release_path
  github_url="https://github.com"
  new_ver="Not found"
  packages=( bat codium fastfetch marktext micro )

  printf "%-15s%-16s%s\n" "GitHub Package" "Latest version" "Installed version"
  for package in "${packages[@]}"; do
    # Set URL of GitHub repoository and currently installed version of package.
    case "$package" in
      bat )
        release_path="sharkdp/bat/releases" ;;
		  codium )
			  release_path="VSCodium/vscodium/releases" ;;
      fastfetch )
        release_path="fastfetch-cli/fastfetch/releases" ;;
      marktext )
        release_path="marktext/marktext/releases" ;;
      micro )
        release_path="zyedidia/micro/releases" ;;
      * )
        printf "%s Invalid package name - %s\n" "$RED_ERROR" "${package,,}" >&2
    esac

    # Get installed version
    cur_ver=$(installed_version "$package")
    # Download package's GitHub release page to a temporary file.
    curl -s -o "$tmp_file" "$github_url/$release_path"
    # Extract newest version number, ignoring beta and release candidate releases.
    case "$package" in
      micro )
        new_ver=$(sed 's/\// /g' "$tmp_file" | grep -Ev 'beta|-rc' | awk '/download/ && /linux/ {print $7;exit}' | sed 's/^v//') ;;
      codium )
        new_ver=$(sed 's/\// /g' "$tmp_file" | grep -Ev 'beta|-rc' | awk '/download/ && /amd64.deb/ {print $8;exit}' | sed 's/^v//') ;;
      * )
        new_ver=$(sed 's/\// /g' "$tmp_file" | grep -Ev 'beta|-rc' | awk '/download/ && /amd64.deb/ {print $7;exit}' | sed 's/^v//') ;;
    esac
    # Print capitalized package name
    printf "%s%-16s" "${darkgray}" "${package^}"
    # Print newest version
    if [[ "$new_ver" ]]; then
      printf "%s%-16s" "${gray}" "$new_ver"
     else
      printf "%s%-16s" "${red}" "No release"
    fi
    # Print current installed version.
    if [[ "$new_ver" == "$cur_ver" ]]; then
      printf "%s%s\n" "${gray}" "$cur_ver"
    elif [[ "$cur_ver" ]]; then
      printf "%s%-16s%sUpdate available\n" "${gray}" "$cur_ver" "${orange}"
    else
      printf "%s%s\n" "${gray}" "not installed"
    fi
  done
  printf "%s\n" "${normal}"
}

apt_tools() {
	local cur_ver packages package
  packages=( batcat bluefish featherpad fzf geany gedit git glow nano shellcheck xed )

	printf "%-15s%s\n" "Package" "Version"
	for package in "${packages[@]}"; do
		if exists "$package"; then
		  printf "%s%-15s%s" "${darkgray}" "${package^}" "${gray}"
      [[ "$package" == "batcat" ]] && package="bat"
      cur_ver=$(installed_version "$package")
      printf "%s\n" "$cur_ver"
		fi
	done
	printf "%s\n" "${normal}"
}

terminals() {
	local cur_ver packages package
  packages=( gnome-terminal kitty lxterminal terminator xfce4-terminal xterm )

	printf "%-15s%s\n" "Terminal" "Version"
	for package in "${packages[@]}"; do
		if exists "$package"; then
			printf "%s%-15s%s" "${darkgray}" "${package^}" "${gray}"
      cur_ver=$(installed_version "$package")
      printf "%s\n" "$cur_ver"
		fi
	done
	printf "%s\n" "${normal}"
}

browsers() {
	local cur_ver packages package
	packages=( brave-browser chromium firefox librewolf google-chrome )

	printf "%-15s%s\n" "Browser" "Version"
	for package in "${packages[@]}"; do
		if exists "$package"; then
			printf "%s%-15s%s" "${darkgray}" "${package^}" "${gray}"
      [[ "$package" == "google-chrome" ]] && package+="-stable"
      cur_ver=$(installed_version "$package")
      printf "%s\n" "$cur_ver"
		fi
	done
	printf "%s\n" "${normal}"
}

main() {
  local script version
  script=$(basename "$0")
  version="14.2.25065"
  clear
  box "$script $version"
  printf "Newest & installed versions of select programs.\n\n"
  github_versions
  apt_tools
  browsers
  terminals
	exit
}

## Execution ##

check_package curl
tmp_file=$(mktemp -q) || die "Failed to create temporary file." 1
trap cleanup EXIT
main "$@"
