#!/usr/bin/env bash
##########################################################################
# Script Name  : write-iso
# Description  : Copies an ISO file to a USB drive using dd
# Dependencies : fzf, ~/bin/functionlib
# Arguments    : see help function
# Author       : Copyright (C) 2023, Richard B. Romig, LuditeGeek
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 18 Feb 2023
# Updated      : 24 May 2024
# Comments     : Testing indicates USB drive need to be mounted.
#              : Works with fuzzy finder (fzf) or zenity, if installed.
#              : To test without writing to USB drive, use the -d option to enable a dryrun.
#              : By default, after a dryrun, USB drive will not be unmounted.
# License      : GNU General Public License, version 2.0
# Copyright Â© 2023, Richard B. Romig
# Email: rick.romig@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="6.0.24145"
readonly _updated="22 May 2024"
readonly iso_d="$HOME/Downloads/ISO/"
user=$(whoami)
dryrun="$FALSE"

## Functions ##

help() {
	local errcode="${1:-2}"
	cat << END_HELP
${green}Usage:${normal} $_script [OPTION]
${orange}OPTIONS:${normal}
	-d	Enable Dry Run simulation
	-h	Display help
	-w	Write ISO to USB device
$_script $_version (Updated $_updated)
END_HELP
  exit "$errcode"
}

check_usb_drive() {
	[[ $(lsblk -S -o TRAN | grep 'usb') = *usb* ]] || diehard "No USB drive connected." "Insert and mount the target USB drive." "$_script v$_version ($_updated)"
}

select_iso() {
	isofile=$(find "$iso_d" -maxdepth 3 -type f -iname "*.iso" -print | sort -d | fzf --height 40% --reverse --prompt "Select the ISO file to write: ")
}

select_usb() {
	usb_device=$(lsblk -o HOTPLUG,TYPE,NAME,SIZE,LABEL | awk '$2 == "disk" && $1 == "1" {print $0}' | awk '{$1=$1}1' | sed 's/1//' | fzf --height 40% --reverse --prompt "Select the USB drive to write to: ")
	usb_device=$(echo "$usb_device" | awk '{print $2}')
}

mount_usb() {
  [[ -d "/media/$user/$mount_name" ]] || sudo mkdir -p "/media/$user/$mount_name"
	sudo mount "/dev/$usbpart" "/media/$user/$mount_name" 2>/dev/null
	printf "USB drive /dev/%s is mounted at /media/$user/%s\n" "$usbpart" "$mount_name"
}

unmount_usb() {
	sudo umount "/dev/$usbpart"	&& printf "USB drive unmounted.\n" # /media/$user/"$mount_name"
	[[ -d "/media/$user/$mount_name" ]] && sudo rmdir "/media/$user/$mount_name"
	printf "It's now safe to remove the USB drive.\n"
}

simulate_dd() {
  local iso="$1"
	local usb="$2"
  printf "\nWriting %s to /dev/%s (SIMULATED) ...\n" "$(basename "$iso")" "$usb"
  spin
  sleep 10
  kill "$!"
  tput cnorm
  printf "\n%s written to /dev/%s (SIMULATED)\n"  "$(basename "$iso")" "$usb"
  printf "\nContents of /dev/%s:\n" "$usb"
  ls "/media/$user/$mount_name"
}

write_dd() {
	local iso="$1"
	local usb="$2"
	printf "\nWriting %s to /dev/%s...\n" "$(basename "$iso")" "$usb"
	if sudo dd if="$iso" of="/dev/$usb" bs=16M status=progress oflag=sync; then
	  printf "%s written to /dev/%s.\n" "$(basename "$iso")" "$usb"
    printf "\nContents of /dev/%s\n\n" "$usb"
    ls "/media/$user/$mount_name"
else
    diehard "$iso write to /dev/$usb failed.\n" "$_script v$_version"
  fi
}

write_iso() {
	printf "%-16s %s\n" "Selected ISO:" "$(basename "$isofile")"
	printf "%-16s /dev/%s\n" "Selected device:" "$usb_device"

	# Mount selected USB drive if not already mounted.
	usbpart="${usb_device}1"
	if mount | grep -q "$usbpart" > /dev/null 2>&1; then
		mount_name=$(lsblk | grep "$usbpart" | cut -d'/' -f4- )
	else
		sudo_login 2
		mount_name="$(date +%y%b%d)"
		mount_usb #"/dev/$usbpart"
	fi

	# Confirm action or cancel
	if [[ "$dryrun" == "$TRUE" ]]; then
		simulate_dd "$isofile" "$usb_device"
	else
		printf "\n%sIf you continue, ALL data will be erased from device %s.%s\n\n" "$orange" "$usb_device" "$normal"
		printf "Answer 'yes' only if you are %s%sABSOLUTELY%s sure you want to proceed.\n\n" "$bold" "$orange" "$normal"
		if yes_or_no "Write $(basename "$isofile") to /dev/$usb_device?"; then
			sudo_login 2
			write_dd "$isofile" "$usb_device"
			printf "Unmounting the USB Drive from /dev/%s/%s\n" "$user"  "$mount_name"
			mount | grep -q "/dev/$usbpart" > /dev/null 2>&1 && unmount_usb
		else
		printf "Operation canceled. No action taken.\n"
		fi
	fi

}

## Execution ##

box "$_script v$_version"
printf "Writes ISO to a USB drive.\n\n"

noOpt=1
optstr=":dhw"
while getopts "$optstr" opt; do
	case "$opt" in
		d )
			dryrun="$TRUE"
			printf "%sPerforming a dryrun. The ISO will NOT be written to USB drive.%s\n\n" "$orange" "$normal"
		;;
		h )
			help 0
		;;
		w )
			check_package fzf
			check_usb_drive
			select_iso
			select_usb
			write_iso
		;;
		? )
			printf "%s Invalid option -%s\n" "$red_error" "$OPTARG" >&2
			help 2
	esac
	noOpt=0
done
[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$red_error" >&2; help 1; }
shift "$(( OPTIND - 1 ))"
exit
