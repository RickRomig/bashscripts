#!/usr/bin/env bash
##########################################################################
# Script Name  : write-iso
# Description  : Copies an ISO file to a USB drive using dd
# Dependencies : None
# Arguments    : None
# Author       : Copyright (C) 2023, Richard B. Romig, 18 Feb 2023
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Comments     : Run script from a directory containing the ISO file.
#              : Testing indicates USB drive should be mounted.
#              : Works with fuzzy finder (fzf), if installed.
#              : To test without writing to USB drive, comment call to write_dd and uncomment call to simulate_dd
# License      : GNU General Public License, version 2.0
##########################################################################

# Copyright Â© 2023, Richard B. Romig
# Email: rick.romig@gmail.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.
## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091,SC2034,SC2207

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="0.5.0"
readonly _updated="06 Feb 2024"
user=$(whoami)

## Functions ##

cleanup() {
	[[ -f "$devfile" ]] && rm -f "$devfile"
}

help() {
	local errcode="${1:-2}"
	cat << END_HELP
${green}Usage:${normal} $_script [OPTION]
${orange}OPTIONS:${normal}
	-f	Select with Fuzzy Finder (fzf)
	-h	Display help
	-s	Select with Select Menu
	-z	Select with Zenity dialog
$_script $_version (Updated $_updated)
END_HELP
  exit "$errcode"
}

display_introduction() {
	cat << END_INTRO
	$_script verifies SHA256/SHA512/MD5 checksums with ISO files.
	The script offers three options for selecting ISO files and USB drives - fzf
	(Fuzzy Finder), Zenity dialog boxes, or a menu using select. Zenity and fzf
	need to be installed prior to using those options.

	You should already be in the directory containing the ISO files you wish to
	write to a USB drive, especially if you are using Fuzzy Finder or the select
	menu.

	The USB drive you plan to write to should be inserted and mounted before
	running the script. If the USB drive is not already mounted, the script will
	mount the drive at /media/$USER/$(date +%y%b%d). (/media/user/yymmdd)

END_INTRO
}

check_usb_drive() {
	[[ $(lsblk -S -o TRAN | grep 'usb') = *usb* ]] || diehard "No USB drive connected." "Insert and mount the target USB drive." "$_script v$_version ($_updated)"
}

# List available ISO files and select file to write
select_iso() {
	local num_iso
	num_iso=$(find ./ -maxdepth 1 -type f -name "*.iso" | wc -l)
	[[ "$num_iso" = 0 ]] && diehard "No ISO files found." "Change to a directory containing the ISO file to be checked." "$_script $_version ($_updated)"

	under_line "ISO files:" "*"
	PS3="Please select an ISO file: "
	options=($(find ./ -maxdepth 1 -name "*.iso" | sed 's/\.\///' | sort -u))
	select opt in "${options[@]}" "Quit"; do
		if (( REPLY == 1 + ${#options[@]} )); then
			printf "No ISO file selected. Operation canceled. Exiting the script."
			leave "$_script $_version (updated: $_updated)"
		elif (( REPLY > 0 && REPLY <= ${#options[@]} )); then
			isofile="$opt"
			break
		else
			printf "Invalid option. Choose 1 - %d\n" "${#options[@]}"
		fi
	done
	printf "\n"
}

fzf_select_iso() {
	local num_iso
	num_iso=$(find ./ -maxdepth 1 -type f -name "*.iso" | wc -l)
	[[ "$num_iso" = 0 ]] && diehard "No ISO files found." "Change to a directory containing the ISO file to be checked." "$_script $_version ($_updated)"
	isofile=$(find ./ -type f -name "*.iso" -print | sed 's/\.\///' | fzf --prompt "Select the ISO file to check: ")
}

zen_select_iso() {
	local file
	file=$(zenity --file-selection --file-filter='ISO files (iso) | *.iso' --file-filter='All files | *' --title="Select an ISO file.")
	case "$?" in
		0 ) isofile="$(basename "$file")" ;;
		1 ) echo "$file not selected." ;;
		-1 ) echo "$file not selected"
	esac
}

# List removable devices and select device to write to
select_usb() {
	printf "Available drives:\n"
	lsblk -o HOTPLUG,TYPE,NAME,SIZE,LABEL | awk '$2 == "disk" && $1 == "1" {print $0}' | awk '{$1=$1}1' | sed 's/1//;s/disk //'
	print_line "-" 40
	PS3="Please select an available USB drive: "
	options=($(lsblk -o NAME,TYPE,HOTPLUG | awk '$2 == "disk" && $3 == "1" {print $1}'))
	select opt in "${options[@]}" "Quit"; do
		if (( REPLY == 1 + ${#options[@]} )); then
			printf "No USB device selected. Operation canceled. Exiting the script.\n"
			leave "$_script v$_version ($_updated)"
		elif (( REPLY > 0 && REPLY <= ${#options[@]} )); then
			usb_device="$opt"
			break
		else
			printf "Invalid option. Choose 1 - %d\n" "${#options[@]}"
		fi
	done
}

fzf_select_usb() {
	usb_device=$(lsblk -o HOTPLUG,TYPE,NAME,SIZE,LABEL | awk '$2 == "disk" && $1 == "1" {print $0}' | awk '{$1=$1}1' | sed 's/1//' | fzf --height 40% --reverse --prompt "Select the USB drive to write to: ")
	usb_device=$(echo "$usb_device" | awk '{print $2}')
}

zen_select_usb() {
	usbdev=$(lsblk -o HOTPLUG,TYPE,NAME,SIZE | awk '$2 == "disk" && $1 == "1" {print $3,$4}')
	echo "$usbdev" | \
	awk '{
	    print NR;
	    for(i=1;i<=NF;i++){
	        print $i;
	    }
	}' | \
	zenity --list \
	--title="USB Devices" \
	--column="Index" --column="Device" --column="Size" \
	--print-column=2 > "$devfile"  2>/dev/null
	usb_device=$(cat "$devfile")
}


write_dd() {
	local iso="$1"
	local usb="$2"
 	printf "\nWriting %s to /dev/%s...\n" "$isofile" "$usb_device"
	if sudo dd if="$iso" of="/dev/$usb" bs=16M status=progress oflag=sync; then
	  printf "%s written to /dev/%s.\n" "$iso" "$usb"
    printf "\nContents of /dev/%s\n\n" "$usb_device"
    ls "/media/$user/$mount_name"
else
    diehard "$iso write to /dev/$usb failed.\n" "$_script v$_version ($_updated)"
  fi
}

simulate_dd() {
  local iso="$1"
	local usb="$2"
  printf "\nSimulating writing %s to /dev/%s ...\n" "$isofile" "$usb_device"
  spin
  sleep 10
  kill "$!"
  tput cnorm
  printf "\n%s written to /dev/%s (SIMULATED)\n"  "$isofile" "$usb_device"
  printf "\nContents of /dev/%s\n\n" "$usb_device"
  ls "/media/$user/$mount_name"
}

mount_usb() {
  [[ -d "/media/$user/$mount_name" ]] || sudo mkdir -p "/media/$user/$mount_name"
	sudo mount "/dev/$usbpart" "/media/$user/$mount_name" 2>/dev/null
	printf "USB drive /dev/%s is mounted at /media/$user/%s\n" "$usbpart" "$mount_name"
}

unmount_usb() {
	sudo umount "/dev/$usbpart"	&& printf "USB drive unmounted.\n" # /media/$user/"$mount_name"
	[[ -d "/media/$user/$mount_name" ]] && sudo rmdir "/media/$user/$mount_name"
	printf "It's now safe to remove the USB drive.\n"
}

## Execution ##

trap cleanup EXIT

printf "Writes ISO to a USB drive.\n\n"

noOpt=1
optstr=":dfhsz"
while getopts "$optstr" opt; do
	case "$opt" in
		d )
			dryrun="$TRUE"
			printf "%sPerforming a dryrun. The ISO will NOT be written to USB drive.%s\n\n" "$orange" "$normal"
		;;
		f )
			if exists fzf; then
				check_usb_drive
				select_iso_directory
				fzf_select_iso
				fzf_select_usb
			else
				leave "fzf (Fuzzy Finder) is not installed on this system."
			fi
		;;
		h )
			help 0
		;;
		s )
			check_usb_drive
			select_iso_directory
			select_iso
			select_usb
		;;
		z )
			if exists zenity; then
				check_usb_drive
				devfile=$(mktemp -q) || die "Failed to create temporary file." 1
				select_iso_directory
				zen_select_iso
				zen_select_usb
			else
				leave "Zenity is not installed on this system."
			fi
		;;
		? )
			printf "%s Invalid option -%s\n" "$red_error" "$OPTARG" >&2
			help 2
	esac
	noOpt=0
done
[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$red_error" >&2; help 1; }
shift "$(( OPTIND - 1 ))"

printf "%-16s %s\n" "Selected ISO:" "$isofile"
printf "%-16s /dev/%s\n" "Selected device:" "$usb_device"

# Mount selected USB drive if not already mounted.
usbpart="${usb_device}1"
if mount | grep -q "$usbpart" > /dev/null 2>&1; then
	mount_name=$(lsblk | grep "$usbpart" | cut -d'/' -f4- )
else
	sudo_login 2
	mount_name="$(date +%y%b%d)"
	mount_usb #"/dev/$usbpart"
fi

# Confirm action or cancel
if [[ "$dryrun" == "$TRUE" ]]; then
	simulate_dd "$isofile" "$usb_device"
else
	printf "%sIf you continue, ALL data will be erased from device %s.%s\n\n" "$orange" "$usb_device" "$normal"
	printf "Answer 'yes' only if you are %s%sABSOLUTELY%s sure you want to proceed.\n\n" "$bold" "$orange" "$normal"
	if yes_or_no "Write $isofile to /dev/$usb_device?"; then
		sudo_login 2
		write_dd "$isofile" "$usb_device"
		printf "Unmounting the USB Drive from /dev/%s/%s\n" "$user"  "$mount_name"
		mount | grep -q "/dev/$usbpart" > /dev/null 2>&1 && unmount_usb
	else
	printf "Operation canceled. No action taken.\n"
	fi
fi
popd > /dev/null || printf "%s popd failed!" "$red_error" >&2
leave "$_script v$_version (Updated: $_updated)"
