#!/usr/bin/env bash
##########################################################################
# Script Name  : write-iso
# Description  : Copies an ISO file to a USB drive using dd
# Dependencies : None
# Arguments    : None
# Author       : Copyright (C) 2023, Richard B. Romig, 18 Feb 2023
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Comments     : Run script from a directory containing the ISO file.
#              : Testing indicates USB drive should be mounted.
#              : Works with fuzzy finder (fzf), if installed.
#              : To test without writing to USB drive, comment call to write-dd and uncomment call to simulate_dd
# License      : GNU General Public License, version 2.0
##########################################################################

# Copyright Â© 2023, Richard B. Romig
# Email: rick.romig@gmail.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.
## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091,SC2034,SC2207

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="0.4.1"
readonly _updated="02 Nov 2023"
user=$(whoami)

## Functions ##

select_iso() {
	num_iso=$(find ./ -maxdepth 1 -type f -name "*.iso" | wc -l)
	[[ "$num_iso" = 0 ]] && diehard "No ISO files found." "Change to a directory containing the ISO file to be checked." "$_script $_version ($_updated)"
	
	if exists fzf; then
		isofile=$(find ./ -type f -name "*.iso" -print | sed 's/\.\///' | fzf --prompt "Select the ISO file to write: ")
	else
		PS3="Please select an ISO file: "
		options=($(find ./ -maxdepth 1 -name "*.iso" | sed 's/\.\///'))
		select opt in "${options[@]}" "Quit"; do
			if (( REPLY == 1 + ${#options[@]} )); then
				printf "No ISO file selected. Operation canceled. Exiting the script."
				leave "$_script $_version (updated: $_updated)"
			elif (( REPLY > 0 && REPLY <= ${#options[@]} )); then
				isofile="$opt"
				break
			else
				printf "Invalid option. Choose 1 - %d\n" "${#options[@]}" 
			fi
		done
	fi
}

select_usb() {
	if exists fzf; then
		usb_device=$(lsblk -o HOTPLUG,TYPE,NAME,SIZE,LABEL | awk '$2 == "disk" && $1 == "1" {print $0}' | awk '{$1=$1}1' | sed 's/1//' | fzf --prompt "Select the USB drive to write to: ")
		usb_device=$(echo "$usb_device" | awk '{print $2}')
	else
		printf "Available drives:\n"
		lsblk -o HOTPLUG,TYPE,NAME,SIZE,LABEL | awk '$2 == "disk" && $1 == "1" {print $0}' | awk '{$1=$1}1' | sed 's/1//'
		print_line "-" 40
		PS3="Please select an available USB drive: "
		options=($(lsblk -o NAME,TYPE,HOTPLUG | awk '$2 == "disk" && $3 == "1" {print $1}'))
		select opt in "${options[@]}" "Quit"; do
			if (( REPLY == 1 + ${#options[@]} )); then
				printf "No USB device selected. Operation canceled. Exiting the script.\n"
				leave "$_script v$_version ($_updated)"
			elif (( REPLY > 0 && REPLY <= ${#options[@]} )); then
				usb_device="$opt"
				break
			else
				printf "Invalid option. Choose 1 - %d\n" "${#options[@]}" 
			fi
		done
	fi
}

write_dd() {
	local iso="$1"
	local usb="$2"
 	printf "\nWriting %s to /dev/%s...\n" "$isofile" "$usb_device"
	if sudo dd if="$iso" of="/dev/$usb" bs=16M status=progress oflag=sync; then
	  printf "%s written to /dev/%s.\n" "$iso" "$usb"
    printf "\nContents of /dev/%s\n\n" "$usb_device"
    ls "/media/$user/$mount_name"
else
    diehard "$iso write to /dev/$usb failed.\n" "$_script v$_version ($_updated)"
  fi
}

simulate_dd() {
  local iso="$1"
	local usb="$2"
  printf "\nSimulating writing %s to /dev/%s ...\n" "$isofile" "$usb_device"
  spin
  sleep 10
  kill "$!"
  tput cnorm
  printf "\n%s written to /dev/%s (SIMULATED)\n"  "$isofile" "$usb_device"
  printf "\nContents of /dev/%s\n\n" "$usb_device"
  ls "/media/$user/$mount_name"


mount_usb() {
  [[ -d "/media/$user/$mount_name" ]] || sudo mkdir -p "/media/$user/$mount_name"
	sudo mount "/dev/$usbpart" "/media/$user/$mount_name" 2>/dev/null
	printf "USB drive /dev/%s is mounted at /media/$user/%s\n" "$usbpart" "$mount_name"
}}

unmount_usb() {
	sudo umount "/dev/$usbpart"	&& printf "USB drive unmounted.\n" # /media/$user/"$mount_name"
	[[ -d "/media/$user/$mount_name" ]] && sudo rmdir "/media/$user/$mount_name"
	printf "It's now safe to remove the USB drive.\n"
}

## Execution ##

user_in_sudo

printf "Writes ISO to a USB drive.\n\n"

# Check if a USB drive is connected

[[ $(lsblk -S -o TRAN | grep 'usb') = *usb* ]] || diehard "No USB drive connected." "Insert and mount the target USB drive." "$_script v$_version ($_updated)"
# mount | grep -qw media || diehard "No USB drive mounted." "Check with GUI file manager." "$_script v$_version ($_updated)"

# List available ISO files and select file to write
select_iso
printf "Selected ISO: %s\n\n" "$isofile"

# List removable devices and select device to write to

select_usb
printf "Selected device: /dev/%s\n%sIf you continue, ALL data will be erased from this device.%s\n\n" "$usb_device" "$orange" "$normal"
printf "Answer 'yes' only if you are %s%sABSOLUTELY%s sure you want to proceed.\n\n" "$bold" "$orange" "$normal"

# Mount selected USB drive if not already mounted.

usbpart="${usb_device}1"
if mount | grep -q "$usbpart" > /dev/null 2>&1; then
	mount_name=$(lsblk | grep "$usbpart" | cut -d'/' -f4- )
else
	mount_name="$(date +%y%b%d)"
	mount_usb #"/dev/$usbpart"
fi

# Confirm action or cancel

if yes_or_no "Write $isofile to /dev/$usb_device?"; then
  # simulate_dd "$isofile" "$usb_device"
  write_dd "$isofile" "$usb_device"
else
  printf "Operation canceled. No action taken.\n"
fi

# unmount the USB Drive

printf "Unmounting the USB Drive from /dev/%s/%s\n" "$user"  "$mount_name"
mount | grep -q "/dev/$usbpart" > /dev/null 2>&1 && unmount_usb

leave "$_script v$_version (Updated: $_updated)"
