#!/usr/bin/env bash
##########################################################################
# Script Name  : no-snaps
# Description  : Enables or disables Snaps on Linux Mint 20 and later.
# Dependencies : None
# Arguments    : [-d] [-e] [-h] [-s] (See help function)
# Author       : Copyright (C) 2020, Richard B. Romig, 30 Jun 2020
# Email        : rick.romig@gmail.com
# Comments     :
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

# Copyright Â© 2020, Richard B. Romig
# Email: rick.romig@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091

# Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="0.3.0"
readonly _updated="02 Mar 2024"
readonly pref_file="/etc/apt/preferences.d/nosnap.pref"

## Functions ##

snap_status() {
  if [[ -f "$pref_file" ]]; then
    grep -q '^# Package:' "$pref_file" && return "$TRUE" || return "$FALSE"
  else
    return "$TRUE"
  fi
}

enable_snaps() {
  is_systemd || leave "SystemD is required for Snaps."
  if [[ -f "$pref_file" ]]; then
    if grep -q '^Package:' "$pref_file"; then
      sudo sed -i '/^Package/s/^/# /;/^Pin/s/^/# /' "$pref_file"
      printf "\nInstallation of Snapd and Snap packages is now enabled.\n"
    else
      printf "\nInstallation of Snapd and Snap packages is already enabled by %s.\n" "$pref_file"
    fi
  else
    printf "\n%s does not exist. Installation of Snapd and Snap packages is enabled by default." "$pref_file"
  fi
}

disable_snaps() {
  if [[ -f "$pref_file" ]]; then
    if grep -q '^# Package:' "$pref_file"; then
      sudo sed -i '/Package/s/^# //;/Pin/s/^# //' "$pref_file"
      printf "\nInstallation of Snapd and Snap packages is now disabled.\n"
    else
      printf "\nInstallation of Snapd and Snap packages is already disabled.\n"
    fi
  else
    create_nosnaps
    printf "%s has been created. Installation of Snapd and Snap packages is now disabled.\n" "$pref_file"
  fi
}

create_nosnaps() {
  cat << NO_SNAPS sudo tee "$pref_file" > /dev/null
# To prevent repository packages from triggering the installation of Snap,
# this file forbids snapd from being installed by APT.
# For more information: https://linuxmint-user-guide.readthedocs.io/en/latest/snap.html

Package: snapd
Pin: release a=*
Pin-Priority: -10
NO_SNAPS
}

help() {
  local errcode="${1:=2}"
  cat << END_HELP
${green}Usage:${normal} $_script [OPTION]
${orange}OPTIONS:${normal}
  -e    Enable the installation of snapd and snap packages
  -d    Disable the installation of snapd and snap packages
  -h    Help
  -s    Status of snapd and snap package installation
END_HELP
  exit "$errcode"
}

## Execution ##

printf "Enables or disables the installation of Snapd and Snap packages.\n"

noOpt=1
optstr=":dehs"
while getopts "$optstr" opt; do
  case "$opt" in
    d )
      sudo_login 2
      disable_snaps
    ;;
     e )
      sudo_login 2
      enable_snaps
    ;;
    h )
      help 0
    ;;
    s )
      printf "\nStatus of snapd and snap packages: "
      snap_status && printf "Snaps are enabled.\n" || printf "Snaps are disabled.\n"
    ;;
    ? )
      printf "\n%s Invalid option -%s\n" "$red_error" "$OPTARG" >&2
      help 2
  esac
	noOpt=0
done
[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$red_error" >&2; help 1; }
shift "$(( OPTIND - 1 ))"
leave "$_script v$_version (Updated: $_updated)"
