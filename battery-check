#!/usr/bin/env bash
###############################################################################
# Script Name  : battery-check
# Description  : Display charge and health statics of a laptop battery
# Dependencies : bc (not installed by default on BunsenLabs Beryllium)
# Arguments    : -h, --help, -v --version
# Author       : Copyright (C) 2020, Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 28 Jul 2020
# Updated      : 09 Jan 2025
# Comments     : Uses data from /sys/class/power_supply/BAT*
# TODO (Rick)  :
# License      : GNU General Public License, version 2
###############################################################################
#
# Copyright Â© 2024, Richard B. Romig
# Email: rick.romig@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.
# Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

  script=$(basename "$0"); readonly script
  readonly version="6.7.25009"

## Functions ##

help() {
  local errcode updated
  errcode="${1:-2}"
  updated="09 Jan 2025"
  cat << _HELP_
${orange}$script${normal} $version, Upated: $updated
Shows battery charge and health information

${green}Usage:${normal} $script [OPTION]

${orange}Available options:${normal}
  -h,--help     Show this help text
  -v,--version  Show version and information
  With no argument, displays battery health information.
_HELP_
  exit "$errcode"
}

version() {
  cat << _VERSION_
$script $version, Updated: $updated
Displays the charge state and health of a laptop battery using data obtained
from files in /sys/class/power_supply/BAT*. Capacity information may be shown
in either Ampere-hours (Ah) or Watt-hours (Wh), depending on your system.
_VERSION_
}

battery_status() {
  local bat_status bat_charge
  printf "\n%sBattery charge:%s\n" "$orange" "$normal"
  [[ -f "$battery_path/status" ]] || die "Problem with the battery! Replace it!"
  bat_status=$(cat "$battery_path/status")
  [[ -f "$battery_path/capacity" ]] || die "Problem with the battery! Replace it!"
  bat_charge=$(cat "$battery_path/capacity")
  [[ "$bat_status" == "Discharging" && "$bat_charge" -le 25 ]] && warn="\U26A0\UFE0F"
  printf "\t%sStatus:%s %s\n" "$lightgreen" "$normal" "$bat_status"
  printf "\t%sCharge:%s %s%%  %s\n" "$lightgreen" "$normal" "$bat_charge" "$warn"
}

battery_capacity() {
  local actual_full design_full unit actual_max design_max int_des int_act cap_percent bat_health
  if [[ -f "$battery_path/charge_full" ]]; then
    actual_full="charge_full"
    design_full="charge_full_design"
    unit="Ah"
  else
    actual_full="energy_full"
    design_full="energy_full_design"
    unit="Wh"
  fi

  actual_max=$(awk 'NF{print $1/1000000}' OFMT="%2.2f" "$battery_path/$actual_full")
  design_max=$(awk 'NF{print $1/1000000}' OFMT="%2.2f" "$battery_path/$design_full")
  int_des="${design_max%%.*}"
  int_act="${actual_max%%.*}"

  if [[ "$int_des" -eq 0 || "$int_act" -eq 0 ]]; then
    cap_percent="0"
    bat_health="0"
  else
    cap_percent=$(echo "100/${design_max}*${actual_max}" | bc -l)
    bat_health=$(echo "$cap_percent" | awk 'NF{print $1/1}' OFMT="%2.2f")
  fi

  printf "\n%s%-17s%s\n" "$orange" "Battery health:" "$normal"
  printf "\t%s%-17s%s %s %s\n" "$lightgreen" "Actual capacity:" "$normal" "$actual_max" "$unit"
  printf "\t%s%-17s%s %s %s\n" "$lightgreen" "Design capacity:" "$normal" "$design_max" "$unit"
  printf "\t%s%-17s%s %s%%\n" "$lightgreen" "Battery health:" "$normal" "$bat_health"
  battery_condition "$cap_percent"
}

battery_condition() {
  local cap_pct c_pct warn_level warn
  cap_pct="$1"
  c_pct="${cap_pct%%.*}"
  if [[ "$c_pct" -eq 0 ]]; then
    warn_level=0
  else
    warn_level=$(echo "$cap_pct" | awk 'NF{print $1/1}' OFMT="%.0f")
  fi

  if [[ "$warn_level" -le "0" ]]; then
    warn="\U1F4A9"
    printf "\t%sReplace the Battery!%s  %\n" "$red" "$normal" "$warn"
  elif [[ "$warn_level" -le "35" ]]; then
    warn="\U1F622"
    printf "\t%sThe battery should be replaced.%s  %\n" "$red" "$normal" "$warn"
  elif [[ "$warn_level" -le "65" ]]; then
    warn="\U26A0\UFE0F"
    printf "\t%sThe battery is getting weak.%s  %\n" "$orange" "$normal" "$warn"
  else
    printf "\t%sThe battery is in good condition.%s\n" "$green" "$normal"
  fi
}

battery_specs() {
  local battery_data battery_serial
  battery_data=$(cat "$battery_path"/uevent)
  battery_serial=$(echo "$battery_data" | awk -F= '/SERIAL/ {print $NF}')
  [[ -z "$battery_serial" || "$battery_serial" == " " ]] && battery_serial="Not specified"
  printf "\n%sBattery Data:%s\n" "$orange" "$normal"
  printf "\t%s%-15s%s%s\n" "$lightgreen" "Manufacturer:" "$normal" "$(echo "$battery_data" | awk -F= '/MANUFACTURER/ {print $NF}' | sed 's/^ //')"
  printf "\t%s%-15s%s%s\n" "$lightgreen" "Nodel name:" "$normal" "$(echo "$battery_data" | awk -F= '/MODEL/ {print $NF}')"
  printf "\t%s%-15s%s%s\n" "$lightgreen" "Serial number:" "$normal" "$battery_serial"
  printf "\t%s%-15s%s%s\n" "$lightgreen" "Technology:" "$normal" "$(echo "$battery_data" | awk -F= '/TECHNOLOGY/ {print $NF}')"
}

ac_power() {
  local ac_path ac_status
  ac_path=$(find /sys/class/power_supply/ -name "AC*")
  ac_status="$(cat "$ac_path/online")"
  printf "\n%sAC Power:%s\n" "$orange" "$normal"
  printf "\tLaptop"
  case "$ac_status" in
    0 )
      printf " is not plugged in to AC power.\n" ;;
    1 )
      printf " is plugged in to AC power.\n" ;;
    * )
      printf "'s AC power status cannot be determined.\n"
  esac
}

hidpp_battery() {
  local hidpp_path
	printf "\n%sHID++ Battery:%s\n" "$orange" "$normal"
  for hidpp_path in /sys/class/power_supply/hidpp_battery_?; do
    if [[ "$hidpp_path" != "/sys/class/power_supply/hidpp_battery_?" ]]; then
      printf "\t%sDevice:%s %s\n" "$lightgreen" "$normal" "$(basename "$hidpp_path")"
      printf "\t%s%s %s:%s %s%%\n" "$lightgreen" "$(cat "$hidpp_path/manufacturer")" "$(cat "$hidpp_path/model_name")" "$normal" "$(cat "$hidpp_path/capacity")"
		else
			printf "HID++ battery not present.\n"
    fi
  done
}

battery_check() {
  local battery_name battery_path
  printf "%s%sBattery Information%s\n" "$bold" "$orange" "$normal"
  if [[ -d /proc/acpi/button/lid/ ]]; then
    battery_name=$(find /sys/class/power_supply/ -name "BAT*" | awk -F/ '/BAT/ {print $5}')
    if [[ -n "$battery_name" ]]; then
      battery_path="/sys/class/power_supply/$battery_name"
      printf "\n%sBattery:%s %s\n" "$orange" "$normal" "$battery_name"
      battery_status
      battery_capacity
      battery_specs
    else
      printf "\n%sNo battery detected%s\n" "$lightred" "$normal" >&2
    fi
    ac_power
    hidpp_battery
  else
    printf "\nThis system is not a laptop.\n" >&2
  fi
}

main() {
	clear
  if [[ "$#" -gt 0 ]]; then
    case "$1" in
      -h|--help )
        help 0
      ;;
      -v|--version )
        version
        exit
      ;;
      * )
        printf "%s Invalid argument - %s\n" "$RED_ERROR" "$1" >&2
        help 2
    esac
	else
		check_package bc
		battery_check
		over_line "$script v$version"
		exit
  fi
}

## Execution ##

main "$@"
