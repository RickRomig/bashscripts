#!/usr/bin/env bash
###############################################################################
# Script Name  : functionlib
# Description  : personal function library used in Bash scripts
# Dependencies : none
# Arguments    : none except those passed to individual functions
# Author       : Copyright (C) 2019, Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 21 Sep 2019
# Last updated : 14 Apri 2025
# Comments     : source into the current shell environment by entering at the begining of the script:
#              : # shellcheck source=/home/rick/bin/functionlib.
#              : # shellcheck disable=SC1091  # not necessary if using shellcheck -x to run shelllcheck
#              : source "$HOME/bin/functionlib"
# Warning!     : Using 'set -o pipefail' in script may cause unexpected behavior or some variables to not be recognized.
# License      : GNU General Public License, version 2.0
###############################################################################
## Shellcheck Directives ##
# shellcheck disable=SC2034 # diabled globally because of colors block.

## Global variables ##

declare -r TRUE=0
declare -r FALSE=1
declare -r GITEA_URL="http://192.168.0.16:3000/Nullifidian"
declare -r GITHUB_URL="https://github.com/RickRomig"
RED_ERROR=$(printf "\e[91mERROR:\e[0m"); readonly RED_ERROR
RED_WARNING=$(printf "\e[91mWARNING!\e[0m"); readonly RED_WARNING

# Get the local network from the first three octets of the default gateway address. Assumes a /24 (class C) private network.
LOCALNET=$(ip route get 1.2.3.4 | cut -d' ' -f3 | sed 's/\..$//'); readonly LOCALNET

## Colors ##

# Text attributes
normal=$(echo -en "\e[0m")
bold=$(echo -en "\e[1m")
dim=$(echo -en "\e[2m")
underline=$(echo -en "\e[4m")
blink=$(echo -en "\e[5m")
reverse=$(echo -en "\e[7m")
hidden=$(echo -en "\e[8m")
strikethrough=$(echo -en "\e[9m")

# Foreground (text) colors
black=$(echo -en "\e[30m")
red=$(echo -en "\e[31m")
green=$(echo -en "\e[32m")
orange=$(echo -en "\e[33m")
blue=$(echo -en "\e[34m")
purple=$(echo -en "\e[35m")
aqua=$(echo -en "\e[36m")
gray=$(echo -en "\e[37m")
darkgray=$(echo -en "\e[90m")
lightred=$(echo -en "\e[91m")
lightgreen=$(echo -en "\e[92m")
lightyellow=$(echo -en "\e[93m")
lightblue=$(echo -en "\e[94m")
lightpurple=$(echo -en "\e[95m")
lightaqua=$(echo -en "\e[96m")
white=$(echo -en "\e[97m")
default=$(echo -en "\e[39m")

# Background colors
BLACK=$(echo -en "\e[40m")
RED=$(echo -en "\e[41m")
GREEN=$(echo -en "\e[42m")
ORANGE=$(echo -en "\e[43m")
BLUE=$(echo -en "\e[44m")
PURPLE=$(echo -en "\e[45m")
AQUA=$(echo -en "\e[46m")
GRAY=$(echo -en "\e[47m")
DARKGRAY=$(echo -en "\e[100m")
LIGHTRED=$(echo -en "\e[101m")
LIGHTGREEN=$(echo -en "\e[102m")
LIGHTYELLOW=$(echo -en "\e[103m")
LIGHTBLUE=$(echo -en "\e[104m")
LIGHTPURPLE=$(echo -en "\e[105m")
LIGHTAQUA=$(echo -en "\e[106m")
WHITE=$(echo -en "\e[107m")
DEFAULT=$(echo -en "\e[49m")

## Functions ##

###############################################################################
# die
# Purpose: Display an error message and die (exit with an error code)
# Arguments:
#   $1 -> Error message
#   $2 -> Exit status (optional, default is 1)
###############################################################################
die() {
  local errmsg errcode
  errmsg="${1:-Undefined error}"
  errcode="${2:-1}"
  printf "\e[91mERROR:\e[0m %s\n" "$errmsg" >&2
  exit "$errcode"
}

###############################################################################
# diehard
# Purpose: Display an error message of 1 or more lines and exit
# Arguments: Any text immediately following the function call.
# Example: diehard "File not found." "Check directory."
###############################################################################
diehard() {
  local line
	printf "\e[91mERROR:\e[0m "
	exec 2>&1; for line; do printf "%s\n" "$line"; done; exit 1
}

###############################################################################
# error_handler
# Purpose: Display message for trapped errors.
# Arguments:
#   $1 -> Error code passed by trap builtin
#   $2 -> Line number of error passed by trap builtin
# trap 'error_handler $? $LINENO' ERR
# Do not use in scripts with functions that return non-error integers.
###############################################################################
error_handler() {
  local err_code="$1"
  local line_nr="$2"
  printf "\e[91mERROR:\e[0m (%s) occurred on line %s\n" "$err_code" "$line_nr" >&2
  exit "$err_code"
}

###############################################################################
# root_user
# Purpose: Return true if script is being executed by the root user
# Arguments: none
# Returns: True or False
###############################################################################
root_user() {
  [[ "$(id -u)" -eq "0" ]] && return "$TRUE" || return "$FALSE"
}

###############################################################################
# user_exists
# Purpose: Return true if user exists in /etc/passwd
# Argument:
#   $1 -> Username to check in /etc/passwd
# Returns: True or False
###############################################################################
user_exists() {
  local U="$1"
  grep -q "^${U}" /etc/passwd && return "$TRUE" || return "$FALSE"
}

###############################################################################
# sudo_login
# Purpose: Prompts for user password if user is in the sudo group.
# If user is not in the sudo group, displays error message and exits.
# Argument:
#   $1 -> number or seconds to sleep before blanking the prompt line. If delay is 0, blanking line is skippped.
###############################################################################
sudo_login() {
  local delay="${1:-2}"
  if id -nG "$USER" | grep -qw sudo; then
    if ! sudo -vn 2>/dev/null; then
      sudo ls > /dev/null 2>&1
      if [[ "$delay" -gt 0 ]]; then
        sleep "$delay"
        printf '\e[A\e[K'
      fi
    fi
 else
    diehard "$USER is not a member of the sudo group. Access denied." "This incident will be reported to Big Brother."
  fi
}

###############################################################################
# bin_in_path
# Purpose: Return true if $HOME/bin is in the PATH
# Arguments: none
# Returns: True or False
###############################################################################
bin_in_path() {
  echo "$PATH" | grep -q "$HOME/bin" && return $TRUE || return $FALSE
}

###############################################################################
# exists
# Purpose: Returns true if command/program is installed.
# Argument:
#   $1 -> command/program to be checked.
# Returns: True or False
###############################################################################
exists() {
  command -v "$1" > /dev/null 2>&1 && return "$TRUE" || return "$FALSE"
}

###############################################################################
# get_distribution
# Purpose: Sets global variable 'distro' to the full name of the current distribution.
# Arguments: none
###############################################################################
get_distribution() {
  local distro
  if [[ -f /etc/lsb-release ]]; then
    distro=$(awk -F= '/DISTRIB_DESCRIPTION/ {print $NF}' /etc/lsb-release | sed 's/"//g')
  else
    distro=$(/usr/bin/lsb_release --description --short)
  fi
  echo "$distro"
}

###############################################################################
# is_debian
# Purpose: Returns true if the distribution is directly based on Debian.
# Arguments: none
# Returns: True or False
# Notes: Antix, BunsenLabs, and MX Linux show as a Debian codename.
###############################################################################
is_debian() {
  local codename
  codename=$(/usr/bin/lsb_release --codename --short)
  case "$codename" in
    bookworm|bullseye|faye|boron )
      return "$TRUE"
    ;;
    * )
      return "$FALSE"
  esac
}

###############################################################################
# debian_based
# Purpose: Returns true if distributions is a Debian derivative.
# Arguments: none
# Returns: True or False
###############################################################################
debian_based() {
  local like_deb
  like_deb=$(grep -E 'ID|ID_LIKE' /etc/os-release | grep -w debian)
  [[ "$like_deb" ]] && return "$TRUE" || return "$FALSE"
}

###############################################################################
# is_focal
# Purpose: Returns true if distribution is based on Ubuntu 20.04 (i.e., Mint 20.x)
# Arguments: none
# Returns: True or False
###############################################################################
is_focal() {
  [[ $(awk -F= '/UBUNTU_CODENAME/ {print $NF}' /etc/os-release) == "focal" ]] && return "$TRUE" || return "$FALSE"
}

###############################################################################
# is_jammy
# Purpose: Returns true if distribution is based on Ubuntu 22.04 (i.e., Mint 21.x)
# Arguments: none
# Returns: True or False
###############################################################################
is_jammy() {
  [[ $(awk -F= '/UBUNTU_CODENAME/ {print $NF}' /etc/os-release) == "jammy" ]] && return "$TRUE" || return "$FALSE"
}

###############################################################################
# is_noble
# Purpose: Returns true if distribution is based on Ubuntu 24.04 (i.e., Mint 22.x)
# Arguments: none
# Returns: True or False
###############################################################################
is_noble() {
  [[ $(awk -F= '/UBUNTU_CODENAME/ {print $NF}' /etc/os-release) == "noble" ]] && return "$TRUE" || return "$FALSE"
}

###############################################################################
# support_ppa
# Purpose: Returns true if the distribution supports Ubuntu PPA.
# Arguments: none
# Returns: True or False
###############################################################################
support_ppa() {
  local codename
  codename=$(/usr/bin/lsb_release --codename --short)
  case "$codename" in
    jammy|noble|vanessa|vera|victoria|virginia|wilma|xia )
      return "$TRUE"
    ;;
    * )
      return "$FALSE"
  esac
}

###############################################################################
# antix_mx
# Purpose: Returns true if distribution is antiX or MX Linux
# Arguments: none
# Returns: True or False
###############################################################################
antix_mx() {
  local dist_id
	[[ -f /etc/lsb-release ]] || return "$FALSE"
  dist_id=$(awk -F'=' '/DISTRIB_ID/ {print $NF}' /etc/lsb-release 2> /dev/null)
  [[ "$dist_id" == "antiX" || "$dist_id" == "MX" ]] && return "$TRUE" || return "$FALSE"
}

###############################################################################
# bunsenlabs
# Purpose: Returns true if distribution is BunsenLabs
# Arguments: none
# Returns: True or False
###############################################################################
bunsenlabs() {
  [[ $(/usr/bin/lsb_release --id --short) == "BunsenLabs" ]] && return "$TRUE" || return "$FALSE"
}

###############################################################################
# is_arch
# Purpose: Return true if distribution is based on Arch Linux
# Arguments: none
# Returns: True or False
###############################################################################
is_arch() {
  [[ -d /etc/pacman.d ]] && return "$TRUE" || return "$FALSE"
}

###############################################################################
# is_systemd
# Purpose: Returns true is the init system is systemd
# Arguments: none
# Returns: True or False
###############################################################################
is_systemd() {
  [[ "$(/usr/bin/ps -p 1 | awk '/1 ?/ {print $NF}')" == "systemd" ]] && return "$TRUE" || return "$FALSE"
}

###############################################################################
# is_sysv
# Purpose: Returns true is the init system is SysV
# Arguments: none
# Returns: True or False
###############################################################################
is_sysv() {
  [[ $(/sbin/init --version 2>/dev/null | awk '{print $1}') == "SysV" ]] && return "$TRUE" || return "$FALSE"
}

###############################################################################
# is_openrc
# Purpose: Returns true is the init system is OpenRC
# Arguments: none
# Returns: True or False
###############################################################################
is_openrc() {
  [[ -f /sbin/openrc ]] && return "$TRUE" || return "$FALSE"
}

###############################################################################
# is_runit
# Purpose: Returns true is the init system is Runit
# Arguments: none
# Returns: True or False
###############################################################################
is_runit() {
  [[ $(cat /proc/1/comm) == "runit" ]] && return "$TRUE" || return "$FALSE"
}

###############################################################################
# is_cinnamon
# Purpose: Returns true is the desktop environment is Cinnamon
# Arguments: none
# Returns: True or False
###############################################################################
is_cinnamon() {
  [[ -f /usr/bin/cinnamon-session ]] && return "$TRUE" || return "$FALSE"
}

###############################################################################
# is_i3wm
# Purpose: Returns true is the window manager is i3wm
# Arguments: none
# Returns: True or False
###############################################################################
is_i3wm() {
  # [[ $(wmctrl -m | awk '/Name/ {print $2}') == "i3" ]] && return "$TRUE" || return "$FALSE"
  [[ -f /usr/bin/i3-session ]] && return "$TRUE" || return "$FALSE"
}

###############################################################################
# is_xfce
# Purpose: Returns true is the desktop environment is Xfce
# Arguments: none
# Returns: True or False
###############################################################################
is_xfce() {
  [[ -f /usr/bin/xfce-session ]] && return "$TRUE" || return "$FALSE"
}

###############################################################################
# is_laptop
# Purpose: Returns true is the system is a laptop
# Arguments: none
# Returns: True or False
###############################################################################
is_laptop() {
  [[ -d /proc/acpi/button/lid/ ]] && return "$TRUE" || return "$FALSE"
}

###############################################################################
# leapyear
# Purpose: Returns true if the current year is a leap year.
# Argument:
#   $1 -> 4-digit year to be checked
# Returns: True or False (0 or 1)
###############################################################################
leapyear() {
  local year="$1"
  [[ $(( year % 4 )) -ne 0 ]] && return "$FALSE"
  [[ $(( year % 400 )) -eq 0 ]] && return "$TRUE"
  [[ $(( year % 100 )) -eq 0 ]] && return "$FALSE" || return "$TRUE"
}

###############################################################################
# local_ip
# Purpose: Extract the last octet of the local IP address
# Arguments: none
# Assumes a Class C /24 network, last octet of 1 - 254
# See ~/bin/snippets/ip-addresses.md for other methods
###############################################################################
local_ip() {
  local octet
  octet=$(ip route get 1.2.3.4 | awk '{print $7}' | cut -d'.' -f4)
  [[ "$octet" ]] || die "No IP address found. Check network status." 1
  printf "%s" "$octet"
}

###############################################################################
# valid_ip
# Purpose: Return a valid and reachable IP address
# Assumes a Class C /24 network, last octet of 1 - 254
# Network identifier and broadcast addresses are excluded
# Argument:
#   $1 -> last octet of the IP address to be validated.
# Returns 0 if the argument is a valid and reachable IP address.
# Exits with exit code of 1 if the argument is an empty string.
# Exits with exit code of 2 if the argument is the IP address of local client.
# Exits with exit code of 3 if the argument is a valid address but unreachable.
# Exits with exit code of 4 if the argument is outside the range of valid addresses.
# Exits with exit code of 5 if the argument is not an integer value.
###############################################################################
valid_ip() {
  local octet status localip
  octet="$1"
  status=0
  localip="$(local_ip)"
  if [[ -z "$octet" ]]; then
    status=1
    printf "%s No argument passed. No host IP.\nEnter the last octet of the target IP address (1 - 254).\n" "$RED_ERROR" >&2
  elif [[ "$1" =~ ^[0-9]+$ ]] 2>/dev/null; then
    # Argument is an integer value
    if (( octet > 0 )) && (( octet < 255 )); then
      # Valid address - test if reachable or local machine
      if [[ "$localip" -eq "$octet" ]]; then
        status=2
        printf "%s %s.%s is the local client computer.\n" "$RED_ERROR" "$LOCALNET" "$octet" >&2
      elif ping -c 1 "$LOCALNET.$octet" > /dev/null 2>&1; then
        status=0
        printf "%s.%s is a valid and reachable IP address.\n" "$LOCALNET" "$octet"
      else
        status=3
        printf "%s %s.%s is valid IP address but is unreachable.\nCheck to see if it is on the network.\n" "$RED_ERROR" "$LOCALNET" "$octet" >&2
      fi
    else
      status=4
      printf "%s %s.%s is not a valid IP address.\nEnter the last octet of the target IP address (1 - 254).\n" "$RED_ERROR" "$LOCALNET" "$octet" >&2
    fi
  else
    status=5
    printf "%s Invalid argument: %s\nEnter the last octet of the target IP address (1 - 254).\n" "$RED_ERROR" "$octet" >&2
  fi

  (( status == 0 )) && return "$status" || exit "$status"
}

###############################################################################
# edit_view_quit
# Purpose: Edit or view a file after it's been created by a script.
# Argument:
#   $1 -> file to be edited or reviewed.
###############################################################################
edit_view_quit() {
  local filename _opt
  filename="$1"
  printf "\nYou may edit or view %s at this time.\n\n" "$filename"
  PS3="Choose an option: "
  select _opt in Edit View Quit; do
    case "$REPLY" in
      1 )
        if exists micro; then
          /usr/bin/micro "$filename"
        else
          /usr/bin/nano "$filename"
          remove_tilde
        fi
        break
      ;;
      2 )
        if exists batcat; then
          "$HOME"/.local/bin/bat "$filename"
        elif exists bat; then
          /usr/bin/bat "$filename"
        else
          viewtext "$filename"
        fi
        break
      ;;
      3 )
        printf "\nExiting.\n"
        break
      ;;
      * )
        printf "%sInvalid choice. Try again.%s\n" "$orange" "$normal" >&2
    esac
  done
}

###############################################################################
# viewtext
# Purpose: View a text file with less or cat
# Argument:
#   $1 -> file to be viewed
###############################################################################
viewtext() {
  local catmax file filelines
  file="$1"
  catmax=$(( $(tput lines)*87/100 ))
  filelines=$(wc -l < "$file")
  if [[ "$filelines" -gt "$catmax" ]]; then less "$file"; else cat "$file"; fi
}

###############################################################################
# remove_tilde
# Purpose: Removes backup files ending with a tilde '~' in the current directory
# Arguments: none
###############################################################################
remove_tilde() {
  local nbu
  nbu=$(find ./ -maxdepth 1 -type f -regex '\./.*~$' | wc -l)
  (( nbu > 0 )) && find . -maxdepth 1 -type f -regex '\./.*~$' -exec rm {} \;
}

###############################################################################
# anykey
# Purpose: Press any key to continue
# Arguments: none
###############################################################################
anykey() {
  read -rsn1 -p "Press any key to continue"; echo
}

###############################################################################
# print_line
# Purpose: Print a line of characters across the screen
# Arguments:
#  $1 -> character to be printed (optional, = is the default)
#  #2 -> integer length of the line (optional, width or termina is the default)
# Character argument, if present, needs to be in double quotes, i.e., "-".
# Character argument, if present, is limited to the first character entered.
# Length argument, if present, must follow a character argument.
###############################################################################
print_line() {
  local char width len
  char="${1:-=}"
  width=$(tput cols)
  if [[ "$#" -gt 1 ]]; then char="$1"; width="$2"; fi
  len=${#char}
  (( len > 1 )) && char=${char::1}
  printf "%${width}s\n" | sed "s/ /$char/g"
}

###############################################################################
# box
# Purpose: Displays a box of asterisks around a line of text.
# Arguments:
#   $1 -> A single line of text to be displayed.
#   $2 -> Optional character to form the box. Default is `*`
# The line of text cannot contain any special characters.
# Character argument, if present, needs to be in double quotes, i.e., "-".
# Character argument, if present, is limited to the first character entered.
###############################################################################
# shellcheck disable=SC2001
box() {
  local char len edge title
  char="${2:-*}"
  len=${#char}
  (( len > 1 )) && char=${char::1}
  title="$char $1 $char"
  edge=$(echo "$title" | sed "s/./$char/g")
  printf "%s\n%s\n%s\n" "$edge" "$title" "$edge"
}

###############################################################################
# under_line
# Purpose: Displays a line of hyphen/dashes under a line of text.
# Arguments:
#   $1 -> A single line of text to be displayed.
#   $2 -> Optional character to form the line. Default is `-`
# The line of text cannot contain any special characters.
# Character argument, if present, needs to be in double quotes, i.e., "-".
# Character argument, if present, is limited to the first character entered.
###############################################################################
# shellcheck disable=SC2001
under_line() {
  local char len line title
  title="$1"
  char="${2:--}"
  len=${#char}
  (( len > 1 )) && char=${char::1}
  line=$(echo "$title" | sed "s/./$char/g")
  printf "%s\n%s\n" "$title" "$line"
}

###############################################################################
# over_line
# Purpose: Displays a line of hyphen/dashes over a line of text.
# Arguments:
#   $1 -> A single line of text to be displayed.
#   $2 -> Optional character to form the line. Default is `-`
# The line of text cannot contain any special characters.
# Character argument, if present, needs to be in double quotes, i.e., "-".
# Character argument, if present, is limited to the first character entered.
###############################################################################
# shellcheck disable=SC2001
over_line() {
  local char len line title
  title="$1"
  char="${2:--}"
  len=${#char}
  (( len > 1 )) && char=${char::1}
  line=$(echo "$title" | sed "s/./$char/g")
  printf "%s\n%s\n"  "$line" "$title"
}

###############################################################################
# leave
# Purpose: Display either a random message from a file or a message string passed
# as an argument before exiting the script.
# Argument:
#   $1 -> Exit message (Optional)
###############################################################################
leave() {
  local message msg_file
  message="$1"
  msg_file="$HOME/.local/share/doc/leave.txt"
  [[ "$message" ]] || message=$(shuf -n 1 "$msg_file")
  printf "%s\n" "$message"
  exit 0
}

###############################################################################
# format_time
# Purpose: Displays the elasped time for a script to run
# Argument:
#   $1 -> $SECONDS
# Place SECONDS=0 ahead of task to be timed.
# NOTE: SECONDS and ((...)) are undefined in POSIX.
###############################################################################
format_time() {
  local ET h m s
  ET="$1"
  ((h=ET/3600))
  ((m=(ET%3600)/60))
  ((s=ET%60))
  printf "%02d:%02d:%02d\n" $h $m $s
}

###############################################################################
# check_for_file
# Purpose: Checks for a needed support file in ~/bin/files
# Arugment:
#   $1 -> File name to be checked.
# Displays OK for 2 seconds if found, exits the script if not.
###############################################################################
check_for_file() {
  local file_dir target_file
  target_file="${1:-foo.bar}"
  file_dir="$HOME/bin/files"
  if [[ -f "$file_dir/$target_file" ]]; then
    printf "%s [OK]\n" "$target_file"
    sleep 1
    printf '\e[A\e[K'
  else
    die "$target_file not found!" 1
  fi
}

###############################################################################
# check_package
# Purpose: Check if a package is installed, and install if not.
# Argurment:
#   $1 -> name of package to check and/or install
# Example: check_package "$package"
# NOTE: if set -o pipefail is used in script, function will try to install package even if already installed.
###############################################################################
check_package() {
  local package="$1"
  if dpkg -l | grep -qw "$package"; then
    printf "%s [OK]\n" "$package"
    sleep 1
    printf '\e[A\e[K'
  else
    printf "Installing %s ...\n" "$package"
    sudo_login 1
    sudo apt-get install "$package" -yyq
  fi
}

###############################################################################
# check_packages
# Purpose: Check if several packages are installed, and install if not.
# Argurment:
#   $@ -> array of packages to check and/or install
# Example: packages=( pkg1 pkg2 ... ); check_packages "${packages[@]}"
# NOTE: if set -o pipefail is used in script, function will try to install package even if already installed.
###############################################################################
check_packages() {
	local pkg pkgs
  pkgs=("$@")
	for pkg in "${pkgs[@]}"; do
		if dpkg -l | grep -qw "$pkg"; then
			printf "%s [OK]\n" "$pkg"
      sleep 1
      printf '\e[A\e[K'
		else
			printf "Installing %s ...\n" "$pkg"
      sudo_login 1
			sudo apt-get install "$pkg" -yyq
		fi
	done
}

###############################################################################
# in_repos
# Purpose: Returns true if a package is in the repositories, including PPAs and
# other added software sources in /etc/apt/sources.list.d.
# Argument:
#   $1 -> package to be checked
# Returns: True or False
###############################################################################
in_repos() {
  local in_repo package
  package="$1"
  in_repo=$(apt-cache show "$package" 2>/dev/null | awk '/Package:/ {print $NF}')
  [[ "$in_repo" ]] && return "$TRUE" || return "$FALSE"
}

###############################################################################
# mount_server
# Purpose: Mounts a sshfs server on the local network using sshfs in user's home directory.
# $tmp_dir, $tmp_file must be global variables in the calling script.
# Arguments: none
###############################################################################
mount_server() {
  local server_ip share mounted
  server_ip="11"
  share="HP-6005"
  ping -c3 "$LOCALNET.$server_ip" > /dev/null 2>&1 || die "$share at $LOCALNET.$server_ip is not online."
  if [[ -d "$HOME/mnt/$share/" ]]; then
    mounted=$(mount | grep "$share")
    if [[ -z "$mounted" ]]; then
      sshfs -o follow_symlinks rick@"$LOCALNET.$server_ip:/home/rick" "$HOME/mnt/$share/"
      echo "$share has been mounted."
    else
      echo "$share is already mounted"
    fi
  else
    # Create the mount point.
    mkdir -p "$HOME/mnt/$share/"
    sshfs -o follow_symlinks rick@"$LOCALNET.$server_ip:/home/rick" "$HOME/mnt/$share/"
    echo "$share has been created and mounted."
  fi
}

###############################################################################
# unmount_server() {
# Purpose: Unmounts a sshfs server on the local network.
# Removes temp directory and temp file, if present.
# $tmp_dir, $tmp_file must be global variables in the calling script.
# Arguments: none
###############################################################################
# shellcheck disable=SC2154
unmount_server() {
  local mounted share
  share="HP-6005"
  mounted=$(mount | grep "$share")
  if [[ -n "$mounted" ]]; then
    fusermount -u "$HOME/mnt/$share"
    [[ -d "$tmp_dir" ]] && rm -rf "$tmp_dir"
    [[ -f "$tmp_file" ]] && rm -f "$tmp_file"
    printf "%s has been unmounted.\n" "$share"
  else
    printf "%s is not mounted.\n" "$share" >&2
  fi
}

###############################################################################
# mount_nas
# Purpose: Mount the NAS on the local network using sshfs.
# $tmp_dir, $tmp_file must be global variables in the calling script.
# Arguments: none
###############################################################################
mount_nas() {
  local server_ip share mounted
  server_ip="4"
  share="NASD97167"
  ping -c3 "$LOCALNET.$server_ip" > /dev/null 2>&1 || die "$share at $LOCALNET.$server_ip is not online."
  if [[ -d "$HOME/mnt/$share/" ]]; then
    mounted=$(mount | grep "$share")
    if [[ -z "$mounted" ]]; then
      sshfs -o follow_symlinks rick@"$LOCALNET.$server_ip:" "$HOME/mnt/$share/"
      echo "$share has been mounted."
    else
      echo "$share is already mounted"
    fi
  else
    mkdir -p "%HOME/mnt/$share/"    # Create the mount point.
    sshfs -o follow_symlinks rick@"$LOCALNET.$server_ip:" "$HOME/mnt/$share/"
    echo "$share has been created and mounted."
  fi
}

###############################################################################
# unmount_nas
# Purpose: Unmounts the NAS (sshfs server) on local network
# Removes temp directory and temp file, if present.
# $tmp_dir, $tmp_file must be global variables in the calling script.
# Arguments: none
###############################################################################
# shellcheck disable=SC2154
unmount_nas() {
  local mounted share
  share="NASD97167"
  mounted=$(mount | grep "$share"); local mounted
  if [[ -n "$mounted" ]]; then
    fusermount -u "$HOME/mnt/$share"
    [[ -d "$tmp_dir" ]] && rm -rf "$tmp_dir"
    [[ -f "$tmp_file" ]] && rm -f "$tmp_file"
    printf "%s has been unmounted.\n" "$share"
  else
    printf "%s is not mounted.\n" "$share" >&2
  fi
}

###############################################################################
# clone_repo
# Purpose: Clone a git repository on the Gitea server to ~/Downloads
# Argument:
#   $1 -> name of the repository to clone
###############################################################################
clone_repo() {
  local git_repo="${1}.git"
  git clone "$GITEA_URL/$git_repo" "$HOME/Downloads"
}

###############################################################################
# dots
# Purpose: Display a series of dots to indicate a running process.
# Argument:
#   $1 -> optional character to be repeated. Default is '.' (period)
# Character argument, if present, needs to be in double quotes, i.e., "-".
# Character argument, if present, is limited to the first character entered.
# Refer to ~/bin/functions/dots-spin.md for usage instructions.
###############################################################################
dots() {
  local char len
  char="${1:-.}"
  len="${#char}"
  (( len > 1 )) && char=${char::1}
  tput civis
  while true; do echo -n "."; sleep 0.2; done &
}

###############################################################################
# spin
# Purpose: Display a spinning character to indicate a running process.
# Arguments: none
# Refer to ~/bin/functions/dots-spin.md for ussage instructions.
###############################################################################
# shellcheck disable=SC1003
# spin() {
#   local i spinner
#   spinner=( '|' '/' '-' '\' )
#   while true; do for i in "${spinner[@]}"; do echo -ne "\r$i"; sleep 0.2; done; done &
# }

###############################################################################
# y_or_n
# Purpose: Displays a yes or no prompt (y|n).
# Argument:
# $1 -> A string requiring a yes or no response.
# Returns: True or False
# Example: y_or_n "Question" && do_something || do_something_else
###############################################################################
y_or_n() {
  local yn yn_prompt
  yn_prompt="$1"
  while true; do
    read -rp "$yn_prompt [y/n] " yn
    case "$yn" in
      [Yy]* )
        return "$TRUE"
      ;;
      [Nn]* )
        return "$FALSE"
      ;;
      '' )
        printf "%s Response required -- try again.\n" "$RED_WARNING" >&2
      ;;
      * )
        printf "%s Invalid choice. Enter y or n.\n" "$RED_ERROR" >&2
    esac
  done
}

###############################################################################
# yes_or_no
# Purpose: Displays a yes or no prompt (yes|no).
# Argument:
# $1 -> A string requiring a yes or no response.
# Returns: True or False
# Example: yes_or_no "Question" && do_something || do_something_else
###############################################################################
yes_or_no() {
  local yn yn_prompt
  yn_prompt="$1"
  while true; do
    read -rp "$yn_prompt [yes/no] " yn
    case "${yn,,}" in
      yes )
        return "$TRUE"
      ;;
      no )
        return "$FALSE"
      ;;
      '' )
        printf "%s Response required -- try again.\n" "$RED_WARNING" >&2
      ;;
      * )
        printf "%s Invalid choice. Enter yes or no.\n" "$RED_ERROR" >&2
    esac
  done
}

###############################################################################
# default_yes
# Purpose: Displays a yes or no prompt (Y|n), defaults to yes if pressing Enter.
# Argument:
# $1 -> A string requiring a yes or no response.
# Returns: True or False
# Example: default_yes "Question" && do_something || do_something_else
###############################################################################
default_yes() {
  local yn yn_prompt
  yn_prompt="$1"
  while true; do
    read -rp "$yn_prompt [Y/n] " yn
    case "$yn" in
      [Yy]*|'' )
        return "$TRUE"
      ;;
      [Nn]* )
        return "$FALSE"
      ;;
      * )
        printf "%s Invalid choice. Enter y or n.\n" "$RED_ERROR" >&2
    esac
  done
}

###############################################################################
# default_no
# Purpose: Displays a yes or no prompt (y|N), defaults to no if pressing Enter.
# Argument:
# $1 -> A string requiring a yes or no response.
# Returns: True or False
# Example: default_no "Question" && do_something || do_something_else
###############################################################################
default_no() {
  local yn yn_prompt
  yn_prompt="$1"
  while true; do
    read -rp "$yn_prompt [y/N] " yn
    case "$yn" in
      [Yy]* )
        return "$TRUE"
      ;;
      [Nn]*|'' )
        return "$FALSE"
      ;;
      * )
        printf "%s Invalid choice. Enter y or n.\n" "$RED_ERROR" >&2
    esac
  done
}

###############################################################################
# url_accessible
# Purpose: Returns true if URL is accessible
# Argument:
# $1 -> URL to be checked
# Returns: True or False
###############################################################################
url_accessible() {
  local url result
  url="$1"
  result=$(curl --head --connect-timeout 8 --max-time 14 --silent --output /dev/null --write-out '%{http_code}' "$url")
  [[ "$result" -eq 200 ]] && return "$TRUE" || return "$FALSE"
}
