#!/usr/bin/env bash
##########################################################################
# Script Name  : verify-iso
# Description  : Verifies SHA256, SHA512, and MD5 checksums of ISO files
# Dependencies : fzf, ~/bin/functionlib
# Arguments    : -h for help, -v to verify ISO (see help function)
# Author       : Copyright (C) 2022, Richard B. Romig, LudditeGeek
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Crated       : 09 Apr 2022
# Updated      : 24 May 2024
# Comments     : Checksum file must be one line only for ISO being checked.
#              : Each ISO file must have its own checksum file.
#              : Checksum files must have one of the following extensions:
#              : .md5, .sha256, or .sha512
# License      : GNU General Public License, version 2.0
# Copyright Â© 2022, Richard B. Romig
# Email: rick.romig@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.
##########################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="9.0.24145"
readonly _updated="24 May 2024"
readonly iso_d="$HOME/Downloads/ISO/"		# Change to reflect the path to your ISO and checksum files.

## Functions ##

help() {
	local errcode="${1:-2}"
	cat << END_HELP
${green}Usage:${normal} $_script [OPTION]
${orange}OPTIONS:${normal}
	-h	Display help
	-v	Verify ISO and checkfile
Checksum files must be a single line specifically for the ISO file you wish to check,
and must have a file extension of .md5, .sha256. or .sha512.
For ease of identifying them, the basename should match the basename name of the ISO.
$_script $_version (Updated $_updated)
END_HELP
  exit "$errcode"
}

select_iso() {
	isofile=$(find "$iso_d" -maxdepth 3 -type f -iname "*.iso" -print | sort -d | fzf --height 40% --reverse --prompt "Select the ISO file to check: ")
}

select_checksum() {
	checksum=$(find "$iso_d" -maxdepth 3 -type f -name "*.md5" -or -name "*.sha*" | sed 's/\.\///' | sort -d | fzf --height 40% --reverse --prompt "Select the checksum file: ")
}

check_sha256() {
	local iso_sha src_sha
	local iso_file="$1"
	local sha_file="$2"
  dots "."
	iso_sha=$(/usr/bin/sha256sum "$iso_file" | awk '{print $1}')
	src_sha=$(awk '{print $1}' "$sha_file")
  kill "$!"; tput cnorm
  printf "done\n\nSelected ISO: %s\n" "$(basename "$iso_file")"
	printf "ISO checksum: %s\n" "$iso_sha"
	printf "SHA checksum: %s\n" "$src_sha"
	[[ "$iso_sha" == "$src_sha" ]] && return "$TRUE" || return "$FALSE"
}

check_sha512() {
	local iso_sha src_sha
  local iso_file="$1"
	local sha_file="$2"
  dots "."
	iso_sha=$(/usr/bin/sha512sum "$iso_file" | awk '{print $1}')
	src_sha=$(awk '{print $1}' "$sha_file")
  kill "$!"; tput cnorm
  printf "done\n\nSelected ISO: %s\n" "$(basename "$iso_file")"
	printf "ISO checksum: %s\n" "$iso_sha"
	printf "SHA checksum: %s\n" "$src_sha"
	[[ "$iso_sha" == "$src_sha" ]] && return "$TRUE" || return "$FALSE"
}

check_md5() {
	local iso_md5 src_md5
  local iso_file="$1"
  local md5_file="$2"
  dots "."
  iso_md5=$(/usr/bin/md5sum "$iso_file" | awk '{print $1}')
  src_md5=$(awk '{print $1}' "$md5_file")
  kill "$!"; tput cnorm
  printf "done\n\nSelected ISO: %s\n" "$(basename "$iso_file")"
  printf "ISO checksum: %s\n" "$iso_md5"
  printf "MD5 checksum: %s\n" "$src_md5"
  [[ "$iso_md5" == "$src_md5" ]] && return "$TRUE" || return "$FALSE"
}

status_msg() {
  local status="${1:-0}"
  if [[ "$status" -eq 0 ]]; then
		printf "%sThe checksums match.%s\n" "$green" "$normal"
  else
		printf "%sThe checksums do not match.%s\n" "$lightred" "$normal"
		printf "Verify checksum with the ISO download site.\n"
  fi
}

check_checksum() {
  local file="$1"
  lines=$(wc -l "$file" | cut -d' ' -f1)
  [[ "$lines" -eq 1 ]] && return "$TRUE" || return "$FALSE"
}

compare_checksums() {
	local ext
	local iso="$1"
	local chk="$2"
	ext="${checksum##*.}"
	printf "Comparing checksums."
	case "$ext" in
	  "md5" )
	    check_md5 "$iso" "$chk"
	    status_msg "$?"
	  ;;
	  "sha256" )
	    check_md5 "$iso" "$chk"
	    status_msg "$?"
	  ;;
	  "sha512" )
	    check_md5 "$iso" "$chk"
	    status_msg "$?"
	  ;;
	  * )
	    printf "\n"
	    diehard "Invalid extension" "Checksum must be one of the following:" ".md5 .sha256 .sha512" "$_script $_version"
	esac
}

verify() {
	select_iso
	select_checksum
	printf "\n%-18s %s\n" "Selected ISO:" "$(basename "$isofile")"
	printf "%-18s %s\n\n" "Selected Checksum:" "$(basename "$checksum")"
	check_checksum "$checksum" || diehard "Too many lines in checksum file." "Reduce file to a single line." "$_script $_version"
	compare_checksums "$isofile" "$checksum"
}

## Execution ##

box "$_script v$_version"
printf "Verifies SHA256/SHA512/MD5 checksums with ISO files.\n"
noOpt=1
optstr=":hv"
while getopts "$optstr" opt; do
	case "$opt" in
		h )
			help 0
		;;
		v )
			check_package fzf
			verify
		;;
		? )
			printf "%s Invalid option -%s\n" "$red_error" "$OPTARG" >&2
			help 2
	esac
	noOpt=0
done
[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$red_error" >&2; help 1; }
shift "$(( OPTIND - 1 ))"
exit
