#!/usr/bin/env bash
###############################################################################
# Script Name  : check-updates
# Description  : check for updates and install if necessary.
# Dependencies : none
# Arguments    : none
# Author       : Copyright (C) 2018, Richard Romig, 08 December 2018
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Comments     : For Debian/Ubuntu-based Linux distributions
#              : apt-get is better suited than apt for use in scripts.
#              : Lists available updates. Updates can be deferred.
## TODO (rick)  :
# License      : GNU General Public License, version 2.0
###############################################################################
# Copyright Â© 2023, Richard B. Romig
# Email: rick.romig@gmail.com
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091,SC2034

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

set -euo pipefail

## Variables ##

_script=$(basename "$0"); readonly _script
readonly _version="2.1.0"
readonly _updated="24 Dec 2023"

## Functions ##

install_updates() {
  printf "\n%sInstalling updates...%s\n" "$orange" "$normal"
  sudo apt-get dist-upgrade -yy
}

clean_cache() {
  printf "\n%sCleaning up apt cache...%s\n" "$orange" "$normal"
  sudo apt-get autoclean
}

remove_orphans() {
  printf "\n%sRemoving orphaned packages...%s\n" "$orange" "$normal"
  sudo apt-get autoremove -yy
}

purge_configs() {
  local rcpkgs
  local rcpkg
  printf "\n%sPurging obsolete configuration files..%s\n" "$orange" "$normal"
  rcpkgs=$(dpkg -l | awk '/^rc/ {print $2}')
  if [[ -n "$rcpkgs" ]]; then
    printf "Packages in the 'rc' state:\n"
    printf "%s\n" "${rcpkgs[@]}"
    for rcpkg in "${rcpkgs[@]}"; do
      sudo apt-get remove --purge "$rcpkg" -yy
    done
  else
    printf "No packages in the 'rc' state to be purged.\n"
  fi
}

update_complete() {
  local num_updates="$1"
  printf "\n%sUpdate complete. %d" "$orange" "$num_updates"
  (( nupd > 1 )) && printf  " updates were" || printf  " update was"
  printf " installed.%s\n" "$normal"
}

defer_updates() {
  local num_updates="$1"
  printf "\n%sNo updates installed. %d" "$orange" "$num_updates"
  (( nupd > 1 )) && printf " updates were" || printf " update was"
  printf " deferred.%s\n" "$normal"
}

update_flatpak() {
  printf "\n%sFlatpak:%s\n" "$orange" "$normal"
  printf "User installations...\n"
  flatpak update --user --noninteractive --force-remove --assumeyes
  printf "System-wide installations...\n"
  sudo flatpak update --system --noninteractive --force-remove --assumeyes
  printf "\n"
}

nala_update() {
  sudo nala upgrade
  if default_no "Run autoremove/autopurge?"; then
    printf "\n%sRemoving orphaned packages...%s\n" "$orange" "$normal"
    sudo nala autoremove
    printf "\n%sPurging obsolete configuration files..%s\n" "$orange" "$normal"
    sudo nala autopurge --config
  fi
  printf "\n"
}

apt_update() {
  local nupd
  sudo apt-get update
  # Get number of packages that can be upgraded
  nupd=$(apt-get -s dist-upgrade | grep "^[[:digit:]]\+ upgraded" | cut -d' ' -f1)
  # If there are packages to be upgraded
  if (( nupd > 0 )); then
    printf "%s%d " "$orange" "$nupd"
    (( nupd > 1 )) && printf "packages" || printf "package"
    printf " can be upgraded%s.\n" "$normal"
    # List upgradeable packages
    apt list --upgradeable
    # Options menu
    COLUMNS=40
    printf "\n%s%sUpdate options:%s\n" "$underline" "$green" "$normal"
    PS3="Choose an option: "
    options=("Install updates." "Install updates & clean cache" "Install updates & remove orphaned packages." \
    "Install updates, clean cache, & remove orphaned packages." "Defer updates until later.")
    select opt in "${options[@]}"; do
      case $REPLY in
        1 )
          install_updates
          update_complete "$nupd"
          break
        ;;
        2 )
          install_updates
          clean_cache
          update_complete "$nupd"
          break
        ;;
        3 )
          install_updates
          remove_orphans
          purge_configs
          update_complete "$nupd"
          break
        ;;
        4 )
          install_updates
          clean_cache
          remove_orphans
          purge_configs
          update_complete "$nupd"
          break
        ;;
        5 )
          defer_updates "$nupd"
          break
        ;;
        * )
          printf "%sInvalid option!%s Select 1..5\n" "$lightred" "$normal" >&2
      esac
    done
  else
    printf "\n%sAll packages are up to date.%s\n" "$orange" "$normal"
  fi
}

## Execution ##

sudo_login 0

SECONDS=0

clear
printf "%s%s%s v%s (%s)\n" "$bold" "$orange" "$_script" "$_version" "$_updated"
printf "System: %s (# %s)\n" "$(uname -n)" "$(local_ip)"
printf "Distro: %s\n" "$(get_distribution)"
printf "Kernel: %s\n\n" "$(uname -sr)"
printf "Checking for updates...%s\n\n" "$normal"

if exists nala; then
  nala_update
else
  apt_update
fi

exists flatpak && update_flatpak

leave "Script completed in $(format_time $SECONDS)"
