#!/usr/bin/env bash
###############################################################################
# Script Name  : check-updates
# Description  : check for updates and install if necessary.
# Dependencies : ~/bin/functionlib (optional: nala, flatpak, cinnamon-spice-updater)
# Arguments    : apt, nala, help
# Author       : Copyright (C) 2018, Richard Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Crated       : 08 Dec 2018
# Updated      : 15 Mar 2025
# Comments     : For Debian/Ubuntu-based Linux distributions
#              : apt-get is better suited than apt for use in scripts.
#              : Lists available updates. Updates can be deferred.
# TODO (rick)  :
# License      : GNU General Public License, version 2.0 <https://github.com/RickRomig/bashscripts>
###############################################################################
# Copyright Â© 2018, Richard B. Romig
# Email: rick.romig@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.
###############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

set -eu

## Global Variables ##

script=$(basename "$0"); readonly script
readonly version="5.0.25074"
SECONDS=0

## Functions ##

help() {
	local errcode="${1:-2}"
  local updated="15 Mar 2025"
	cat << _HELP_
${orange}$script${normal} $version, Upated: $updated
Performs a system update using Apt or Nala.

${green}Usage:${normal} $script [OPTION]

${orange}Available options:${normal}
  apt	  Performs a system upgrade using apt-get
  help	Show this help message and exit
  nala	Performs a system upgrade using nala
${orange}Notes:${normal}
  1) No argument defaults to using nala
  2) If nala is not installed, defers to using apt-get
  3) Argument is not case-sensitive
_HELP_
  exit 0
}

check_action() {
  local action="$1"
  case "${action,,}" in
    apt )
      show_header
      check_disk_space
      sudo_login 2
      apt_update ;;
    nala )
      show_header
      check_disk_space
      sudo_login 2
      if exists nala; then
        nala_update
      else
        apt_update
      fi ;;
    help )
      help 0 ;;
    * )
      printf "%s Invalid argument - %s\n" "$RED_ERROR" "$action"
      help 1
  esac
}

check_disk_space() {
	local df_stats r_size r_used r_perc r_avail
	df_stats=$(df -h / | awk 'NR==2 {print $2,$3,$4,$5}')
	r_size=$(echo "$df_stats" | cut -d ' ' -f1)
	r_used=$(echo "$df_stats" | cut -d ' ' -f2)
	r_perc=$(echo "$df_stats" | cut -d ' ' -f4)
	r_avail=$(echo "$df_stats" | cut -d ' ' -f3)
	printf "\nDisk space used (root): %s / %s %s used, %s available.\n" "$r_used" "$r_size" "$r_perc" "$r_avail"
}

check_reboot_required() {
  if [[ -f /var/run/reboot-required || -f /run/reboot-required ]]; then
    cat /var/run/reboot-required.pkgs
    printf "\n%sREBOOT REQUIRED%s\n" "$orange" "$normal"
    if default_no "Do you want to reboot now?"; then
      sudo reboot
    else
      printf "\n%s Please remember to reboot your system as soon as possible.\n" "$RED_WARNING"
    fi
  fi
}

update_apt_cache() {
  local cache_file current_time updated_time time_diff threshold
  cache_file="/var/cache/apt/pkgcache.bin"
  current_time=$(date +%s)
  updated_time=$(stat -c%Y "$cache_file")
  time_diff=$(( current_time - updated_time ))
  # threshold values: 86400 = 24 hours, 43200 = 12 hours, 21600 = 6 hours 10800 = 3 hours
  threshold=10800
  if [[ "$time_diff" -le "$threshold" ]]; then
    printf "%sApt cache is up to date.%s\n" "$orange" "$normal"
  else
    printf "%sUpdating apt cache...%s\n" "$orange" "$normal"
    sudo apt-get update
  fi
}

install_updates() {
  printf "\n%sInstalling updates...%s\n" "$orange" "$normal"
  sudo apt-get dist-upgrade -yy
}

clean_apt_cache() {
  printf "\n%sCleaning up apt cache...%s\n" "$orange" "$normal"
  sudo apt-get autoclean
}

remove_orphans() {
  local npkgs
  npkgs=$(apt-get autoremove -s | awk '$2 == "upgraded," {print $6}')
  printf "\n%sRemoving orphaned packages...%s\n" "$orange" "$normal"
  if [[ "$npkgs" -gt 0 ]]; then
    sudo apt-get autoremove -yy
  else
    printf "No packages to be removed.\n"
  fi
}

purge_rc_packages() {
  local rcpkg
  printf "\n%sPurging obsolete configuration files..%s\n" "$orange" "$normal"
  if dpkg -l | grep -c '^rc' > /dev/null; then
    for rcpkg in $(dpkg --list | awk '/^rc/ {print $2}'); do
      printf "Purging %s...\n" "$rcpkg"
      sudo apt-get remove --purge "$rcpkg" -yy
    done
  else
    printf "No packages in the 'rc' state.\n"
  fi
}

update_complete() {
  local num_updates="$1"
  printf "\n%sUpdate complete. %d" "$orange" "$num_updates"
  (( num_updates > 1 )) && printf  " updates were" || printf  " update was"
  printf " installed.%s\n" "$normal"
}

defer_updates() {
  local num_updates="$1"
  printf "\n%sNo updates installed. %d" "$orange" "$num_updates"
  (( num_updates > 1 )) && printf " updates were" || printf " update was"
  printf " deferred.%s\n" "$normal"
}

update_flatpak() {
  local fp_count
  fp_count=$(flatpak list | wc -l)
  printf "\n%sFlatpak:%s\n" "$orange" "$normal"
  if [[ "$fp_count" -gt 0 ]]; then
    printf "User installations...\n"
    flatpak update --user --noninteractive --force-remove --assumeyes
    printf "System-wide installations...\n"
    sudo flatpak update --system --noninteractive --force-remove --assumeyes 2> /dev/nul
    printf "\n"
  else
    printf "No Flatpaks installed.\n\n"
  fi
}

update_spices() {
  printf "\n%sCinnamon Spices:%s\n" "$orange" "$normal"
  cinnamon-spice-updater --update-all
}

update_summary() {
	local summary nupd nnew nrem ndef
	summary=$(apt-get dist-upgrade -s |  awk '$2 == "upgraded," {print $1,$3,$6,$(NF-2)}')
	nupd=$(echo "$summary" | cut -d' ' -f1)
	nnew=$(echo "$summary" | cut -d' ' -f2)
	nrem=$(echo "$summary" | cut -d' ' -f3)
	ndef=$(echo "$summary" | cut -d' ' -f4)
	printf "\n%s to upgrade, %s new packages, %s to remove, %s deferred.\n\n" "$nupd" "$nnew" "$nrem" "$ndef"
}

count_updates() {
  local nupdates fields field1 field2
  fields=$(apt-get -s dist-upgrade | awk '$2 == "upgraded," {print $1,$3}')
  field1=$(echo "$fields" | cut -d' ' -f1)
  field2=$(echo "$fields" | cut -d' ' -f2)
  nupdates=$((field1 + field2))
  printf "%s" "$nupdates"
}

nala_update() {
  printf "%sChecking for updates...%s\n" "$orange" "$normal"
  sudo nala upgrade
  if default_no "Run autoremove/autopurge?"; then
    printf "\n%sRemoving orphaned packages...%s\n" "$orange" "$normal"
    sudo nala autoremove
    printf "\n%sPurging obsolete configuration files..%s\n" "$orange" "$normal"
    sudo nala autopurge --config
  else
    printf "Autoremove and autopurge deferred.\n"
  fi
  printf "\n"
}

apt_update() {
  local nupd options _opt
  printf "%sChecking for updates...%s\n" "$orange" "$normal"
  update_apt_cache
  # Get number of packages that can be upgraded
  nupd=$(count_updates)
  update_summary
  # If there are packages to be upgraded
  if (( nupd > 0 )); then
    # List upgradeable packages
    printf "Packages to be upgraded:\n"
    apt list --upgradable 2>/dev/null | sed '1d' | cut -d'/' -f1

    # Options menu
    COLUMNS=40
    printf "\n%s%sUpdate options:%s\n" "$underline" "$green" "$normal"
    PS3="Choose an option: "
    options=(
      "Install updates."
      "Install updates and clean cache."
      "Install updates and remove orphaned packages."
      "Install updates, clean cache, and remove orphaned packages."
      "Defer updates until later."
    )
    select _opt in "${options[@]}"; do
      case $REPLY in
        1 )
          install_updates
          update_complete "$nupd"
          break
        ;;
        2 )
          install_updates
          clean_apt_cache
          update_complete "$nupd"
          break
        ;;
        3 )
          install_updates
          remove_orphans
          purge_rc_packages
          update_complete "$nupd"
          break
        ;;
        4 )
          install_updates
          clean_apt_cache
          remove_orphans
          purge_configs
          update_complete "$nupd"
          break
        ;;
        5 )
          defer_updates "$nupd"
          break
        ;;
        * )
          printf "%sInvalid option!%s Select 1..%d\n" "$lightred" "$normal" "${#options[@]}" >&2
      esac
    done
  else
    printf "\n%sAll packages are up to date.%s\n" "$orange" "$normal"
  fi
}

show_header() {
  local local_host="${HOSTNAME:-$(hostname)}"
  clear
  cat << _HEADER_
${bold}${orange}$script $version
System: $local_host $(local_ip)
Distro: $(get_distribution)
Kernel: $(uname -sr)${normal}

_HEADER_
}

main() {
  local action="${1:-nala}" # Default is nala
  check_action "$action"
  exists cinnamon-spice-updater && update_spices
  exists flatpak && update_flatpak
  check_disk_space
  over_line "Update completed in $(format_time $SECONDS)"
  check_reboot_required
  over_line "$script $version"
  exit
}

## Execution ##

main "$@"
