#!/usr/bin/env bash
##########################################################################
# Script Name  : install-codium
# Description  : installs vscodium from a repo using apt-get
# Dependencies : wget
# Arguments    : see help function for options
# Author       : Copyright © 2023 Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 04 Aug 2023
# Updated      : 18 Oct 2024
# Comments     : Alternative to downloading directly from GitHub repo.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################
#
# Copyright © 2023, Richard B. Romig
# Email: rick.romig@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091

## Source function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

script=$(basename "$0"); readonly script
readonly version="1.10.24292"
readonly key_file="/usr/share/keyrings/vscodium-archive-keyring.asc"
readonly src_list="/etc/apt/sources.list.d/vscodium.list"
verbose_mode="$FALSE"

## Functions ##

help() {
  local errcode updated
	errcode="${1:-2}"
	updated="18 Oct 2024"
	cat << _HELP_
${orange}$script${normal} $version ($updated)
Install/Removes VSCodium & applies settings

${green}Usage:${normal} $script [OPTION]

${orange}Available options:${normal}
  -a  Set apt gpg key and source list
  -h  Display help
  -i  Install VSCodium via apt
  -r  Remove VSCodium
  -s  Apply VSCodium settings
  -v  Enable verbose mode
_HELP_
  exit "$errcode"
}

codiumversion() {
	# codium --version | head -n 1
	dpkg -l codium | awk '/ii/ {print $3}'
}

apply_settings() {
  local vsc_cfg_d="${HOME}/.config/VSCodium/User"
  [[ -d "$vsc_cfg_d" ]] || mkdir -p "$vsc_cfg_d"
  show_message "Applying VSCodium settings..."
  settings
  show_message "VSCodium settings applied."
}

settings() {
  local vsc_cfg_d="${HOME}/.config/VSCodium/User"
  cat << _JSON_ > "$vsc_cfg_d/settings.json"
{
  "workbench.colorTheme": "Default High Contrast",
  "editor.tabSize": 2,
  "editor.fontFamily": "'Fira Code', 'Cascadia Code', 'Droid Sans Mono', 'monospace'",
  "editor.fontLigatures": true,
  "terminal.integrated.fontFamily": "'JetBrainsMono Nerd Font'",
  "editor.wordWrap": "on",
  "editor.fontSize": 16,
  "window.restoreFullscreen": true,
  "editor.insertSpaces": false,
  "editor.autoClosingQuotes": "always"
}
_JSON_
}

set_key() {
	local key_url="https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg"
	wget "$key_url"
	show_message "Setting the GPG key..."
	sudo mv pub.gpg "$key_file"
}

set_src() {
	local src_url="https://paulcarroty.gitlab.io/vscodium-deb-rpm-repo/debs vscodium main"
	show_message "Creating the source list file..."
	echo "deb [ signed-by=$key_file ] $src_url" | sudo tee "$src_list" > /dev/null
}

install_vscodium() {
	sudo_login 2
	show_message "Installing VSCodium..."
	set_key
	set_src
	sudo apt-get update
	sudo apt-get install -y codium
	apply_settings
	printf "VSCodium %s successfully installed.\n" "$(codiumversion)"
}

remove_vscodium() {
	local cfg_dir="${HOME}/.config/VSCodium"
	sudo_login 2
	show_message "Removing VSCodium..."
	sudo apt-get remove codium
	show_message "Removing VSCodium GPG key ..."
	[[ -f "$key_file" ]] && sudo rm -v "$key_file"
	show_message "Removing VSCodium source list ..."
	[[ -f "$src_list" ]] && sudo rm -v "$src_list"
	show_message "Removing VSCodium configuration files ..."
  [[ -d "$cfg_dir" ]] && rm -rf "$vsc_cfg_d"
	printf "VSCodium has been removed.\n"
}

show_message() {
  local message="$1"
  [[ "$verbose_mode" = "$TRUE" ]] && echo "$message"
}

show_title() {
	box "$script v$version"
	printf "Installs/removes VSCodium\n"
}

main() {
  local noOpt opt optstr
	noOpt=1
	optstr=":ahirsv"
	while getopts "$optstr" opt; do
		case "$opt" in
			a)
				exists codium || leave "VSCodium is not installed."
				printf "Setting the GPG key and creating the source list file.\n"
				show_title
				sudo_login 2
				show_message "Checking dependencies..."
				check_package wget
				show_message "Setting the GPG key and creating the source list file."
				set_key
				set_src
			;;
			h )
				help 0
			;;
			i )
				exists codium && leave "VSCodium $(codiumversion) is already installed."
				show_title
				sudo_login 2
				show_message "Checking dependencies..."
				check_package wget
				install_vscodium
			;;
			r )
				exists codium || leave "VSCodium is not installed."
				show_title
				sudo_login 2
				remove_vscodium
			;;
			s )
				exists codium || leave "VSCodium is not installed."
				show_title
				sudo_login 2
				show_message "Checking dependencies..."
				apply_settings
			;;
			v )
				verbose_mode="$TRUE"
				show_message "Verbose mode enabled."
			;;
			? )
				printf "%s Invalid option -%s\n" "$red_error" "$OPTARG" >&2
				help 2
		esac
		noOpt=0
	done
	[[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$red_error" >&2; help 1; }
	shift "$(( OPTIND - 1 ))"
	over_line "$script v$version)"
	exit
}
	## Execution ##

	main "$@"
