#!/usr/bin/env bash
#############################################################################
# Script Name  : rename-host
# Description  : Changes the system hostname
# Dependencies : None
# Arguments    : None
# Author       : Copyright (C) 2019, Richard B. Romig, LudditeGeek@Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 06 Nov 2019
# Updated      : 11 Oct 2024
# Comments     : Changes the hostname in both /etc/hostname and /etc/hosts.
#              : antiX/MX Linux: /etc/hosts - 127.0.0.1      hostname
#              : Rules based on hostname(7) man page
#              : Hostname length limited to 15 characters for NETBIOS compatibility.
#              : old_host & new_host variables are global.
# License      : GNU General Public License, version 2.0
#############################################################################
# Copyright Â© 2019, Richard B. Romig
# Email: rick.romig@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.
#############################################################################

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

script=$(basename "$0"); readonly script
readonly version="5.1.24285"
readonly old_host="${HOSTNAME:-$(hostname)}"
new_host="foo-bar"

## Functions ##

hostname_rules() {
  cat << _RULES_

${lightblue}Hostname Rules${normal}
  ${orange}*${normal} 5-15 characters (for NETBIOS compatibility)
  ${orange}*${normal} a-z, 0-9, - (hyphen)
  ${orange}*${normal} lowercase (uppercase will be converted)
  ${orange}*${normal} no special characters
  ${orange}*${normal} first character cannot be a hyphen or a digit
  ${orange}*${normal} last character cannot be a hyphen
_RULES_
}

get_new_hostname() {
  local strlen maxlen minlen
  minlen=5
  maxlen=15
  while true; do
    printf "\nCurrent hostname is %s\n\n" "$old_host"

    read -rp "Enter new hostname: " new_host
    strlen=${#new_host}
    if (( strlen < minlen || strlen > maxlen )); then
      printf "\n%sHostname must be between %d and %d characters.%s\n" "$orange" "$minlen" "$maxlen" "$normal" >&2
      hostname_rules
      continue
    fi
    # Check new hostname against the rules
    case "$new_host" in
      -* )
        printf "\n%sHostname cannot begin with a hypen.%s\n" "$orange" "$normal" >&2
        hostname_rules
        continue
      ;;
      *- )
        printf "\n%sHostname cannot end with a hyphen.%s\n" "$orange" "$normal" >&2
        hostname_rules
        continue
      ;;
      [0-9]* )
        printf "%s\nHostname cannot begin with a digit.%s\n" "$orange" "$normal" >&2
        hostname_rules
        continue
      ;;
      *[^a-zA-Z0-9-]* )
        printf "\n%sHostname cannot contain any special characters.%s\n" "$orange" "$normal" >&2
        hostname_rules
        continue
      ;;
    esac

    # Compare new hostname with the old hostname
    new_host="${new_host,,}"
    if [[ "$new_host" == "${old_host,,}" ]]; then
      printf "%sHostnames are the same.%s\n" "$orange" "$normal" >&2
      hostname_rules
      continue
    else
      printf "\n%s%s is a valid hostname.%s\n" "$green" "$new_host" "$normal"
      break
    fi
  done
}

change_hostname_hosts() {
  # Make backup copies of the original files and replace old hostname with new hostname
  sudo sed -i.old "s/$old_host/$new_host/" /etc/hostname
  sudo sed -i.old "s/$old_host/$new_host/" /etc/hosts
}

revert_to_old_hostname() {
  sudo mv /etc/hostname.old /etc/hostname > /dev/null 2>&1
  sudo mv /etc/hosts.old /etc/hosts > /dev/null 2>&1
}

remove_old_hostname_hosts() {
  sudo rm /etc/hostname.old /etc/hosts.old
}

confirm_hostname_hosts() {
  local host1 host2
  host1=$(cat /etc/hostname)
  host2=$(awk '/127.0.1.1/ {print $2}' /etc/hosts)
  if [[ -z "$host2" ]]; then
    host2=$(awk '/127.0.0.1/ {print $2}' /etc/hosts | tail -n1)
    # Change address for hostname from 127.0.0.1 to 127.0.1.1
    sudo sed -i '0,/127.0.0.1/! {0,/127.0.0.1/ s/127.0.0.1/127.0.1.1/}' /etc/hosts
  fi
  printf "/etc/hostname = %s\t/etc/hosts = %s\n" "$host1" " $host2"
  if [[ "$host1" == "$new_host" && "$host2" == "$new_host" ]]; then
    remove_old_hostname_hosts
    leave "Hostname successfully changed. Reboot to ensure the change takes effect."
  else
    revert_to_old_hostname
    leave "Hostname change was unsuccessful. Reverted to the original hostname."
  fi
}

main() {
  sudo_login 2
  printf "%s v%s\n" "$script" "$version"
  printf "Renames the system hostname.\n"
  hostname_rules
  get_new_hostname
  print "\nChanging the hostname from %s to %s ...\n" "$old_host" "$new_host"
  change_hostname_hosts
  confirm_hostname_hosts
}

## Execution ##

main "$@"
