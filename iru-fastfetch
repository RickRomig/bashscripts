#!/usr/bin/env bash
###############################################################################
# Script Name  : iru-fastfetch
# Description  : Install/udadate/remove FastFetch
# Dependencies : gdebi, wget
# Arguments    : See help() function
# Author       : Copyright © 2024 Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 02 May 2024
# Last updated : 19 Oct 2024
# Comments     :
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
###############################################################################

# Copyright © 2024, Richard B. Romig
# Email: rick.romig@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.

set -eu

## Global Variables ##

script=$(basename "$0"); readonly script
readonly version="2.4.24293"
readonly GH_URL="https://github.com/fastfetch-cli/fastfetch/releases"
readonly CFG_D="$HOME/.config/fastfetch"
readonly LOGO_D="$HOME/.local/share/fastfetch/logos"	# location for custom logos, if used.

## Functions ##

# shellcheck disable=SC2317 # Don't warn about unreachable commands in this function
# ShellCheck may incorrectly believe that code is unreachable if it's invoked by variable name or in a trap.
cleanup() {
	[[ -f "$tmp_file" ]] && rm "$tmp_file"
	[[ -d "$tmp_dir" ]] && rm -rf "$tmp_dir"
}

die() {
	local errmsg errcode
  errmsg="${1:-Undefined error}"
  errcode="${2:-1}"
  printf "\e[91mERROR:\e[0m %s\n" "$errmsg" >&2
  exit "$errcode"
}

sudo_login() {
  local delay="${1:-2}"
  if id -nG "$USER" | grep -qw sudo; then
    if ! sudo -vn 2>/dev/null; then
      sudo ls > /dev/null 2>&1
      if [[ "$delay" -gt 0 ]]; then
        sleep "$delay"
        printf '\e[A\e[K'
      fi
    fi
  else
    die "$USER is not a member of the sudo group. Access denied." 1
  fi
}

dots() {
	local char len
  char="${1:-.}"
  len="${#char}"
  (( len > 1 )) && char=${char::1}
  tput civis
  while true; do echo -n "."; sleep 0.2; done &
}

check_dependencies() {
	local packages=( gdebi wget )
	for pkg in "${packages[@]}"; do
		if dpkg -l | grep -qw "$pkg"; then
			printf "%s - OK\n" "$pkg"
      sleep 2
      printf '\e[A\e[K'
		else
			printf "Installing %s ...\n" "$pkg"
			sudo apt-get install "$pkg" -yyq
		fi
	done
}

check_distro() {
	# Changes to version 2.8.2 show change to glibc 2.35 which does not support Debian 11 or Ubuntu 20.04 (Mint 20.x )
	local codename
	codename=$(lsb_release --codename --short)
	case "$codename" in
		bookworm|boron|faye|jammy|noble|vanessa|vera|victoria|virginia|wilma ) return "$TRUE" ;;
		* ) return "$FALSE"
	esac
}

ff_version() {
	fastfetch --version | cut -d' ' -f2
}

newest_version() {
  wget -qO "$tmp_file" "$GH_URL"
  new_ver=$(sed 's/\// /g' "$tmp_file" | grep -Ev 'beta|-rc' | awk '/download/ && /amd64.deb/ {print $7;exit}')
  check_distro || new_ver="2.7.1"
  echo "$new_ver"
}

compare_versions() {
	local cur_ver new_ver
	new_ver="$1"
  cur_ver="$(ff_version)"
  if [[ "$cur_ver" == "$new_ver" ]]; then
    echo -e "\e[93mFastFetch $cur_ver is the current version. No update required.\e[0m"
    check_distro || echo "FastFetch $new_ver is the latest version compatible with $(get_distribution)."
  else
    echo -e "\e[93mInstalled version of FastFetch is $cur_ver, updating to $new_ver...\e[0m"
    install_fastfetch "$new_ver"
  fi
}

install_fastfetch(){
  local new_pkg new_ver
	new_ver="$1"
	if [[ "$new_ver" == "2.7.1" ]]; then
		new_pkg="fastfetch-2.7.1-Linux.deb"
	else
		new_pkg="fastfetch-linux-amd64.deb"
	fi
  printf "Downloading FastFetch %s from the fastfetch-cli GitHub repository..." "$new_ver"
  dots "."
  wget -q -P "$tmp_dir/" "$GH_URL/download/$new_ver/$new_pkg"
  kill "$!"; tput cnorm
	sudo_login 2
  printf "done\nInstalling FastFetch %s...\n" "$new_ver"
  sudo gdebi -n "$tmp_dir/$new_pkg"
  printf "FastFetch %s installed.\n" "$(ff_version)"
}

remove_fastfetch() {
	sudo_login 2
	printf "Removing FastFetch %s ...\n" "$(ff_version)"
	sudo dpkg --remove fastfetch
	[[ -d "$CFG_D" ]] && rm -rf "$CFG_D"
	[[ -d "$LOGO_D" ]] && rm -rf "$LOGO_D"
	printf "Fastfetch and its configuration files have been removed.\n"
}

fastfetch_config() {
	[[ -d "$CFG_D" ]] || mkdir -p "$CFG_D"
	# [[ -d "$LOGO_D" ]] || mkdir -p "$LOGO_D"
	printf "Downloading configuration files...\n"
	cp "$HOME/bin/files/config.jsonc" "$CFG_D/"
	# cp path/to/custom_logo "$LOGO_D/"
	sed -i '/neofetch/s/^\[/# \[/' "$HOME/.bashrc"		# Comments call to neofetch
	echo '[[ -x /usr/bin/fastfetch ]] && /usr/bin/fastfetch' | tee -a "$HOME/.bashrc"
	printf "Fastfetch configuration applied.\n"
}

help() {
	local errcode  updated
	errcode="${1:-2}"
	updated="19 Oct 2024"
	cat << _HELP_
$script v$version ($updated)
Installs, configures, removes, updates FastFetch

Usage: $script [OPTION]

Available options:
  -c  Apply Fastretch configuration and logo
  -h  Display help
  -i  Install Fastfetch
  -r  Remove Fastfetch
  -u  Update Fastfetch
_HELP_
  exit "$errcode"
}

main() {
  local noOpt opt optstr
	noOpt=1
	optstr=":chiru"
	while getopts "$optstr" opt; do
		case "$opt" in
			c )
				exists fastfetch || { echo "Fastfetch is not installed."; exit; }
				echo -e "\e[93mInstalling custom Fastfetch configuration...\e[0m"
				fastfetch_config
			;;
			h )
				help 0
			;;
			i )
				exists fastfetch && { echo "Fastfetch $(ff_version) is already installed."; exit; }
				tmp_file=$(mktemp) || die "Failed to create temporary file." 1
				tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
				trap cleanup EXIT
				check_dependencies
				new_ver="$(newest_version)"
				[[ "$new_ver" ]] || die "No download available. Try again later." 1
				check_distro || echo "Fastfetch $new_ver is the latest version compatible with $(get_distribution)"
				echo -e "\e[93mInstalling Fastfetch version $new_ver...\e[0m"
				install_fastfetch "$new_ver"
				fastfetch_config
			;;
			r )
				exists fastfetch || { echo "Fastfetch is not installed."; exit; }
				remove_fastfetch "$new_ver"
			;;
			u )
				exists fastfetch || { echo "Fastfetch is not installed."; exit; }
				tmp_file=$(mktemp) || die "Failed to create temporary file." 1
				tmp_dir=$(mktemp -d) || die "Failed to create temporary directory." 1
				trap cleanup EXIT
	      check_dependencies
				new_ver="$(newest_version)"
				[[ "$new_ver" ]] || die "No download available. Try again later." 1
				compare_versions "$new_ver"
			;;
			? )
				echo -e "\e[91mERROR:\e[0m %s\n Invalid option -${OPTARG}" >&2
				help 2
		esac
		noOpt=0
	done
	[[ "$noOpt" = 1 ]] && { echo -e "\e[91mERROR:\e[0m %s\n No argument passed." >&2; help 1; }
	shift "$(( OPTIND - 1 ))"
	echo "$script v$version"
	exit
}

## Execution ##

main "$@"
