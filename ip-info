#!/usr/bin/env bash
#####################################################################
# Script Name  : ip-info
# Description  : Displays IP & network device information
# Dependencies : curl, iw, network-manager (nmcli)
# Arguments    : None
# Author       : Copyright (C) 2019, Richard Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 19 Feb 2019
# Updated      : 07 Nov 2024
# Comments     : Some systems may require sudo to get ssid & signal strength.
#              : Add those hostnames to case in req_sudo()
#              : So far, I've only seen this with MX Linux.
# TODO         : show_bridge() needs work.
# License      : GNU General Public License, version 2.0
#####################################################################

# Copyright Â© 2023, Richard B. Romig
# Email: rick.romig@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.
## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Global Variables ##

readonly lhost="${HOSTNAME:-$(hostname)}"

## Functions ##

# Some systems may require sudo to get ssid & signal strength.
# Add the hostnames for these systems to the case statement.
req_sudo() {
	local lhost="$1"
  case "$lhost" in
    foo-bar )
      return "$TRUE"
    ;;
    * )
      return "$FALSE"
  esac
}

check_dependencies() {
  local packages=( curl iw network-manager )
  check_packages "${packages[@]}"
}

show_public() {
  local public_ipv4
  public_ipv4=$(/usr/bin/curl -s ifconfig.me)     # http://ident.me
  [[ -n "$public_ipv4" ]] && echo -e "\t${darkgray}IPv4:${normal} $public_ipv4" || echo -e "\tNo public IPv4 address found."
  # public_ipv6=$(/usr/bin/curl -s ifconfig.co)
  # [[ -n "$public_ipv6" ]] && echo -e "\t${lightgreen}IPv6:${normal} $public_ipv6" || echo -e "\tNo public IPv6 address found."
}

show_wired() {
  local eth_int eth_state eth_ip eth_mac
  eth_int=$(/usr/bin/nmcli dev | awk '/ethernet/ {print $1}')
   if [[ -n "$eth_int" ]]; then
     # interface data
     eth_state=$(cat "/sys/class/net/$eth_int/operstate")
     eth_ip=$(/usr/bin/nmcli dev show "$eth_int" | awk '/IP4.ADDRESS/ {print $NF}')
     eth_mac=$(/usr/bin/nmcli dev show "$eth_int" | awk '/GENERAL.HWADDR/ {print $NF}')
   fi
   # display status
   echo -en "\t${darkgray}Ethernet:${normal} "
   case "$eth_state" in
     up )
       echo "$eth_ip"
       echo -e "\t  ${gray}Device:${normal} $eth_int"
       echo -e "\t     ${gray}MAC:${normal} $eth_mac"
     ;;
     down )
     echo "Not connected"
       echo -e "\t  ${gray}Device:${normal} $eth_int"
       echo -e "\t     ${gray}MAC:${normal} $eth_mac"
     ;;
     unknown )
       echo "Unknown state"
       echo -e "\t  ${gray}Device:${normal} $eth_int"
       echo -e "\t     ${gray}MAC:${normal} $eth_mac"
     ;;
     * )
       echo "No device found."
   esac
}

show_wireless() {
  local wifi_int wifi_state wifi_ip wifi_mac wifi_ssid wifi_sig
  wifi_int=$(/usr/bin/nmcli dev | awk '/wifi / {print $1}')
   if [[ -n "$wifi_int" ]]; then
     # interface data
     wifi_state=$(cat "/sys/class/net/$wifi_int/operstate")
     wifi_ip=$(/usr/bin/nmcli dev show "$wifi_int" | awk '/IP4.ADDRESS/ {print $NF}')
     wifi_mac=$(/usr/bin/nmcli dev show "$wifi_int" | awk '/GENERAL.HWADDR/ {print $NF}')
     if req_sudo; then
       wifi_ssid=$(sudo /sbin/iw dev "$wifi_int" link | awk '/SSID/ {print $2}')
       wifi_sig=$(sudo /sbin/iw dev "$wifi_int" link | awk '/signal/ {print $2,$3}')
     else
       wifi_ssid=$(/sbin/iw dev "$wifi_int" link | awk '/SSID/ {print $2}')
       wifi_sig=$(/sbin/iw dev "$wifi_int" link | awk '/signal/ {print $2,$3}')
     fi
     [[ -z "$wifi_ssid" ]] && wifi_ssid="Not available"
     [[ -z "$wifi_sig" ]] && wifi_sig="Not available"
   fi
    # display statu
   echo -en "\t${darkgray}Wireless:${normal} "
   case "$wifi_state" in
     up )
       echo "$wifi_ip"
       echo -e "\t  ${gray}Device:${normal} $wifi_int"
       echo -e "\t     ${gray}MAC:${normal} $wifi_mac"
       echo -e "\t    ${gray}SSID:${normal} $wifi_ssid"
       echo -e "\t  ${gray}Signal:${normal} $wifi_sig"
     ;;
     down )
       echo "Not connected"
       echo -e "\t  ${gray}Device:${normal} $wifi_int"
       echo -e "\t     ${gray}MAC:${normal} $wifi_mac"
     ;;
     unknown )
       echo "Unknown state"
       echo -e "\t  ${gray}Device:${normal} $wifi_int"
       echo -e "\t     ${gray}MAC:${normal} $wifi_mac"
     ;;
     * )
       echo "No device found."
   esac
}

show_bridge() {
  local br_int br_state br_ip br_mac br_route
	# br_int=$(/usr/bin/nmcli dev | awk '/bridge/ {print $1}')
	br_int=$(/usr/bin/nmcli dev | awk '/bridge / {print $1}')

	if [[ -n "$br_int" ]]; then
    # interface data
    br_state=$(cat "/sys/class/net/$br_int/operstate")
	  # br_ip=$(/usr/bin/nmcli dev show "$br_int" | awk '/IP4.ADDRESS/ {print $NF}')
    br_ip=$(ip addr show | awk '/vir/ && /brd/ {print $2}')
	  # br_mac=$(/usr/bin/nmcli dev show "$br_int" | awk '/GENERAL.HWADDR/ {print $NF}')
    br_mac=$(cat "/sys/class/net/$br_int/address")
	  # br_route=$(/usr/bin/nmcli dev show "$br_int" | awk '/IP4.ROUTE/ {print $4;exit}'| sed 's/,//')
    br_route=$(ip route show | awk '/vir/ && /kernel/ {print $1}')
    # display status
    echo -en "\t${darkgray}Bridge:${normal} "
    case "$br_state" in
      up )
        echo -e "\t${darkgray}Bridge:${normal}\t$br_ip"
        echo -e "\t${gray}Device:${normal} $br_int"
        echo -e "\t   ${gray}MAC:${normal} $br_mac"
	      echo -e "\t${gray}Subnet:${normal} $br_route"
      ;;
      down )
        echo "Not connected"
        echo -e "\t${gray}Device:${normal} $br_int"
        echo -e "\t   ${gray}MAC:${normal} $br_mac"
      ;;
      unknown )
        echo "Unknown state"
        echo -e "\t${gray}Device:${normal} $br_int"
        echo -e "\t   ${gray}MAC:${normal} $br_mac"
      ;;
      * )
        echo "No device found."
    esac
	fi
}

show_gateway() {
  echo "${orange}Default Gateway:${normal}"
  /sbin/ip route get 1.2.3.4 | awk '/via/ {print "\t"$3}'
}

show_dns() {
  echo "${orange}DNS Servers:${normal}"
  /usr/bin/nmcli dev show | awk '/IP4.DNS/ {print "\t"$NF}' | sort -u
}

main() {
  local script version lhost
  lhost="${HOSTNAME:-$(hostname)}"
  script=$(basename "$0")
  version="2.9.24312"

  req_sudo "$lhost" && sudo_login 2
  check_dependencies

  clear
  echo "${lightyellow}"
  box "IP Information - $lhost" "*"
  echo "${normal}"
  echo "${orange}Public IP:${normal}"
  show_public
  echo "${orange}Local IP:${normal}"
  show_wired
  show_wireless
  # show_bridge
  show_gateway
  show_dns
  echo ""
  over_line "$script v$version"
  exit
}

## Execution ##

main "$@"
