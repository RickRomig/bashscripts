#!/usr/bin/env bash
#####################################################################
# Script Name  : ip-info
# Description  : Displays IP & network device information
# Dependencies : curl, iw, network-manager (nmcli)
# Arguments    : None
# Author       : Copyright (C) 2019, Richard Romig, Mosfanet
# Email        : rick.romig@gmail.com | rick.romig@mymetronet.net
# Created      : 19 Feb 2019
# Updated      : 28 Nov 2024
# Comments     : Some systems may require sudo to get ssid & signal strength.
#              : Add those hostnames to case in req_sudo()
#              : So far, I've only seen this with MX Linux.
# TODO         : show_bridge() needs work.
# License      : GNU General Public License, version 2.0
#####################################################################

# Copyright Â© 2023, Richard B. Romig
# Email: rick.romig@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.
## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  printf "\e[91mERROR:\e[0m functionlib not found!\n" >&2
  exit 1
fi

## Functions ##

# Some systems may require sudo to get ssid & signal strength.
# Add the hostnames for these systems to the case statement.
req_sudo() {
	local lhost="$1"
  case "$lhost" in
    foo-bar )
      return "$TRUE"
    ;;
    * )
      return "$FALSE"
  esac
}

check_dependencies() {
  local packages=( curl iw network-manager )
  check_packages "${packages[@]}"
}

show_public() {
  local public_ipv4
  public_ipv4=$(/usr/bin/curl -s ifconfig.me)     # http://ident.me
  if [[ "$public_ipv4" ]]; then
    printf "\t%sIPv4:%s %s\n" "$darkgray" "$normal" "$public_ipv4"
  else
    printf "\tNo public IPv4 address found.\n"
  fi
  # public_ipv6=$(/usr/bin/curl -s ifconfig.co)
  # if [[ "$public_ipv6" ]]; then
  #   printf "\t%sIPv4:%s %s\n" "$darkgray" "$normal" "$public_ipv6"
  # else
  #   printf "\tNo public IPv6 address found.\n"
  # fi
}

show_wired() {
  # Assumes only one active ethernet wired interface in the system.
  local eth_int eth_state eth_ip eth_mac
  eth_int=$(/usr/bin/nmcli dev | awk '/ethernet/ {print $1}')
  if [[ "$eth_int" ]]; then
    # interface data
    eth_state=$(cat "/sys/class/net/$eth_int/operstate")
    eth_ip=$(/usr/bin/nmcli dev show "$eth_int" | awk '/IP4.ADDRESS/ {print $NF}' | sed 's/\/24//')
    eth_mac=$(/usr/bin/nmcli dev show "$eth_int" | awk '/GENERAL.HWADDR/ {print $NF}')
    # display status
    printf "\t%sEthernet:%s " "$darkgray" "$normal"
    case "$eth_state" in
      up )
        printf "%s\n" "$eth_ip"
        printf "\t  %sDevice:%s %s\n" "$gray" "$normal" "$eth_int"
        printf "\t     %sMAC:%s %s\n" "$gray" "$normal" "$eth_mac"
      ;;
      down )
        printf "Not connected\n"
        printf "\t  %sDevice:%s %s\n" "$gray" "$normal" "$eth_int"
        printf "\t     %sMAC:%s %s\n" "$gray" "$normal" "$eth_mac"
      ;;
      unknown )
        printf "Unknown state\n"
        printf "\t  %sDevice:%s %s\n" "$gray" "$normal" "$eth_int"
        printf "\t     %sMAC:%s %s\n" "$gray" "$normal" "$eth_mac"
      ;;
      * )
        printf "No device found.\n"
    esac
  fi
}

show_wireless() {
# Assumes only one active wireless interface in the system.
  local wifi_int wifi_state wifi_ip wifi_mac wifi_ssid wifi_sig
  wifi_int=$(/usr/bin/nmcli dev | awk '/wifi / {print $1}')
  if [[ "$wifi_int" ]]; then
    # interface data
    wifi_state=$(cat "/sys/class/net/$wifi_int/operstate")
    wifi_ip=$(/usr/bin/nmcli dev show "$wifi_int" | awk '/IP4.ADDRESS/ {print $NF}' | sed 's/\/24//')
    wifi_mac=$(/usr/bin/nmcli dev show "$wifi_int" | awk '/GENERAL.HWADDR/ {print $NF}')
    if req_sudo; then
      wifi_ssid=$(sudo /sbin/iw dev "$wifi_int" link | awk '/SSID/ {print $2}')
      wifi_sig=$(sudo /sbin/iw dev "$wifi_int" link | awk '/signal/ {print $2,$3}')
    else
      wifi_ssid=$(/sbin/iw dev "$wifi_int" link | awk '/SSID/ {print $2}')
      wifi_sig=$(/sbin/iw dev "$wifi_int" link | awk '/signal/ {print $2,$3}')
    fi
    [[ -z "$wifi_ssid" ]] && wifi_ssid="Not available"
    [[ -z "$wifi_sig" ]] && wifi_sig="Not available"
    # display status
    printf "\t%sWireless:%s " "$darkgray" "$normal"
    case "$wifi_state" in
      up )
        printf "%s\n" "$wifi_ip"
        printf "\t  %sDevice:%s %s\n" "$gray" "$normal" "$wifi_int"
        printf "\t     %sMAC:%s %s\n" "$gray" "$normal" "$wifi_mac"
        printf "\t    %sSSID:%s %s\n" "$gray" "$normal" "$wifi_ssid"
        printf "\t  %sSignal:%s %s\n" "$gray" "$normal" "$wifi_sig"
      ;;
      down )
        printf "Not connected\n"
        printf "\t  %sDevice:%s %s\n" "$gray" "$normal" "$wifi_int"
        printf "\t     %sMAC:%s %s\n" "$gray" "$normal" "$wifi_mac"
      ;;
      unknown )
        printf "Unknown state\n"
        printf "\t  %sDevice:%s %s\n" "$gray" "$normal" "$wifi_int"
        printf "\t     %sMAC:%s %s\n" "$gray" "$normal" "$wifi_mac"
      ;;
      * )
        echo "No device found."
    esac
  fi
}

show_bridge() {
  local br_int br_state br_ip br_mac br_route
	br_int=$(/usr/bin/nmcli dev | awk '/bridge / {print $1}')

	if [[ "$br_int" ]]; then
    # interface data
    br_state=$(cat "/sys/class/net/$br_int/operstate")
    br_ip=$(ip addr show | awk '/vir/ && /brd/ {print $2}' | sed 's/\/24//')
    br_mac=$(cat "/sys/class/net/$br_int/address")
    br_route=$(ip route show | awk '/vir/ && /kernel/ {print $1}')
    # display status
    printf "\t%sBridge:%s   " "$darkgray" "$normal"
    case "$br_state" in
      up )
        printf "%s\n" "$br_ip"
        printf "\t  %sDevice:%s %s\n" "$gray" "$normal" "$br_int"
        printf "\t     %sMAC:%s %s\n" "$gray" "$normal" "$br_mac"
	      printf "\t  %sSubnet:%s %s\n" "$gray" "$normal" "$br_route"
      ;;
      down )
        printf "Not connected\n"
        printf "\t  %sDevice:%s %s\n" "$gray" "$normal" "$br_int"
        printf "\t     %sMAC:%s %s\n" "$gray" "$normal" "$br_mac"
      ;;
      unknown )
        printf "Unknown state\n"
        printf "\t  %sDevice:%s %s\n" "$gray" "$normal" "$br_int"
        printf "\t     %sMAC:%s %s\n" "$gray" "$normal" "$br_mac"
      ;;
      * )
        printf "No device found.\n"
    esac
	fi
}

show_network() {
  local network_addr
  network_addr=$(/sbin/ip route show | grep -w kernel -m 1 | cut -d' ' -f1)
  printf "%sLocal Network:%s\n" "$orange" "$normal"
  printf "\t%s\n" "$network_addr"
}

show_gateway() {
  printf "%sDefault Gateway:%s\n" "$orange" "$normal"
  /sbin/ip route get 1.2.3.4 | awk '/via/ {print "\t"$3}'
}

show_dns() {
  printf "%sDNS Servers:%s\n" "$orange" "$normal"
  /usr/bin/nmcli dev show | awk '/IP4.DNS/ {print "\t"$NF}' | sort -u
}

main() {
  local script version lhost
  lhost="${HOSTNAME:-$(hostname)}"
  script=$(basename "$0")
  version="2.10.24333"

  req_sudo "$lhost" && sudo_login 2
  check_dependencies

  clear
  echo "${lightyellow}"
  box "IP Information - $lhost" "*"
  echo "${normal}"
  printf "%sPublic IP:%s\n" "$orange" "$normal"
  show_public
  printf "%sLocal IP:%s\n" "$orange" "$normal"
  show_wired
  show_wireless
  show_bridge
  show_network
  show_gateway
  show_dns
  over_line "$script v$version"
  exit
}

## Execution ##

main "$@"
