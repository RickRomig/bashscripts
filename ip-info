#!/bin/bash
#####################################################################
# Script Name  : ip-info
# Description  : Displays IP information
# Dependencies : awk, ip, iwconfig, iwgetid, nmcli, wget
# Arguments    : None
# Author       : Richard Romig, 19 February 2019
# Email        : rick.romig@gmail.com
# Comment      : iwconfig may not show signal level for some wireless cards,
#              : noteably, Broadcom cards. See man iwconfig.
# TODO (rick)  :
###############################################################################

# Copyright (C) 2019, Richard B. Romig
# Email: rick.romig@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.

## Functions ##

main()
{
  SCRIPT=$(basename "$0")
  VERSION="2.1.1"
  UPDATED="11 May 2020"

  clear
  echo -e "\n\e[93mIP Information\e[0m"
  echo -e "\e[93m==============\e[0m\n"
  echo -e "\e[32mPublic IP:\e[0m"
  show_public
  echo -e "\e[32mLocal IP:\e[0m"
  show_wired
  show_wireless
  show_gateway_dns
  echo $'\n'$"$SCRIPT v$VERSION (Updated: $UPDATED)"
  exit
}

show_public()
{
  PUBLIC_IP=$(/usr/bin/wget -qO- http://ipv4.icanhazip.com)

  if [ -n "$PUBLIC_IP" ]; then
    echo -e "\t$PUBLIC_IP"
  else
    echo -e "\tNo Internet address found."
  fi
}

show_wired()
{
  ETH_INT=$(/usr/bin/nmcli dev | awk '/ethernet/ { print $1 }')

  [ -n "$ETH_INT" ] && ETH_IP=$(/sbin/ip -o -4 addr show \
  | awk -v name="$ETH_INT" '$0~name { print $4" ("$2")" }')

  echo -en "\t\e[92mEthernet:\e[0m "
  if [ -n "$ETH_INT" ] && [ -n "$ETH_IP" ]; then
    echo "$ETH_IP"
  elif [ -n "$ETH_INT" ]; then
    echo "Not connected"
  else
    echo "No device found."
  fi
}

show_wireless()
{
  WIFI_INT=$(/usr/bin/nmcli dev | awk '/wifi/ { print $1 }')

  if [ -n "$WIFI_INT" ]; then
    WIFI_IP=$(/sbin/ip -o -4 addr show | awk -v name="$WIFI_INT" '$0~name { print $4" ("$2")" }')
    WIFI_DEV=$(/usr/bin/lspci | awk '/Network controller/ {print $8}')
    case "$WIFI_DEV" in
      BCM4313|BCM43228 )
        WIFI_SIG="Not available" ;;
      * )
        WIFI_SIG="$(/sbin/iw "$WIFI_INT" station dump | awk '/signal:/ { print $2 }') dBm"
    esac
  fi

  echo -en "\t\e[92mWireless:\e[0m "
  if [ -n "$WIFI_INT" ] && [ -n "$WIFI_IP" ]; then
    echo "$WIFI_IP"
    echo -e "\t    \e[92mSSID:\e[0m $(/sbin/iwgetid -r)"
    echo -e "\t  \e[92mSignal:\e[0m $WIFI_SIG"
  elif [ -n "$WIFI_INT" ]; then
    echo "Not connected"
  else
    echo "No device found."
  fi
}

show_gateway_dns()
{
  echo -e "\e[32mDefault Gateway:\e[0m"
  /sbin/ip route | awk '/default/ { print "\t"$5": "$3 }'
  echo -e "\e[32mDNS Servers:\e[0m"
  /usr/bin/nmcli dev show | awk '/IP4.DNS/ { printf "\t%s\n",$2 }'
}

## Execution ##

main "$0"
