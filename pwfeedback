#!/usr/bin/env bash
##########################################################################
# Script Name  : pwfeedback
# Description  : Enables/disables display of asterisks when entering password.
# Dependencies : none
# Arguments    : [-e] [-d] [-h] [-s] (see help function for details.)
# Author       : Copyright (C) 2020, Richard B. Romig, Mosfanet
# Email        : rick.romig@gmail.com
# Created      : 27 Sep 2020
# Updated      : 16 Jan 2025
# Comments     : Preferred (default) method is /etc/sudoers.d/0pwfeedback.
# TODO (Rick)  :
# License      : GNU General Public License, version 2.0
##########################################################################

# Copyright Â© 2023, Richard B. Romig
# Email: rick.romig@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.

## Shellcheck Directives ##
# shellcheck source=/home/rick/bin/functionlib
# shellcheck disable=SC1091

## Load function library ##

if [[ -x "$HOME/bin/functionlib" ]]; then
  source "$HOME/bin/functionlib"
else
  echo -e "\e[91mERROR:\e[0m functionlib not found!" >&2
  exit 1
fi

## Variables ##

script=$(basename "$0"); readonly script
readonly version="4.6.25016"
readonly sudoers_file="/etc/sudoers"
readonly pwfb_dir="/etc/sudoers.d"
readonly pwfb_file="0pwfeedback"

## Functions ##

pwfeedback_status() {
  local pwfb
  pwfb=$(sudo grep -w pwfeedback "$sudoers_file")
  if [[ -n "$pwfb" || -f "$pwfb_dir/$pwfb_file" ]]; then
    printf "Password feedback is enabled by "
    [[ "$pwfb" ]] && printf "sudoers.\n" || printf "%s.\n" "$pwfb_file"
  else
    printf "Password feeback is not enabled.\n"
  fi
}

enable_pwfeedback() {
  local pwfb
  pwfb=$(sudo grep -w pwfeedback "$sudoers_file")
  if [[ -n "$pwfb" || -f "$pwfb_dir/$pwfb_file" ]]; then
    printf "Password feedback is already enabled by "
    [[ "$pwfb" ]] && printf "sudoers.\n" || printf "%s.\n" "$pwfb_file"
  else
    printf "Creating %s ...\n" "$pwfb_file"
    printf "Defaults  pwfeedback\n" | sudo tee "$pwfb_dir/$pwfb_file" > /dev/null
    # sudo sh -c 'echo "Defaults pwfeedback" > /etc/sudoers.d/0pwfeedback'
    sudo chmod 440 "$pwfb_dir/$pwfb_file"
    printf "Password feedback enabled by %s.\n" "$pwfb_file"
  fi
}

disable_pwfeedback() {
  local pwfb
  pwfb=$(sudo grep -w pwfeedback "$sudoers_file")
  if [[ -f "$pwfb_dir/$pwfb_file" ]]; then
    sudo rm -fv "$pwfb_dir/$pwfb_file"
    printf "Password feeback is now disabled. %s has been deleted.\n" "$pwfb_dir/$pwfb_file"
  elif [[ "$pwfb" ]]; then
    # Use of visudo to edit /etc/sudoers is highly recommended.
    printf "Remove 'pwfeedback' from the sudoers file using visudo.\n"
    sudo visudo
    sudo grep -qw pwfeedback "$sudoers_file" || printf "Password feeback is now disabled.\n"
  else
    printf "Password feedback is already disabled.\n"
  fi
}

help() {
  local errcode="${1:-2}"
  local updated="16 Jan 2025"
  cat << _HELP_
${orange}$script${normal} $version ($updated)
Enable/Disable password feedback in the terminal.

${green}Usage:${normal} $script [OPTIONS]

${orange}Available options:${normal}
  -e  Enable password feedback
  -d  Disable password feedback
  -h  Help
  -s  Status of password feedback
_HELP_
  exit "$errcode"
}

main() {
  local noOpt opt optstr
  noOpt=1
  optstr=":edhs"
  while getopts "$optstr" opt; do
    case "$opt" in
      e )
        sudo_login 2
        enable_pwfeedback
      ;;
      d )
        sudo_login 2
        disable_pwfeedback
      ;;
      h )
        help 0
      ;;
      s )
        sudo_login 2
        pwfeedback_status
      ;;
      ? )
        printf "%s Invalid option -%s\n" "$RED_ERROR" "$OPTARG" >&2
        help 2
    esac
	  noOpt=0
  done
  [[ "$noOpt" = 1 ]] && { printf "%s No argument passed.\n" "$RED_ERROR" >&2; help 1; }
  shift "$(( OPTIND - 1 ))"
  over_line "$script v$version"
  exit
}

## Execution ##

main "$@"
